<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DPSFXbox360</name>
    </assembly>
    <members>
        <member name="T:DPSF.PivotPoint3D">
            <summary>
            Class to hold and update an object's 3D Pivot Point (point to rotate around), Pivot Velocity, and 
            Pivot Acceleration. This class requires a Position3D object, and optionally a Orientation3D object, 
            that should be affected by rotations around the Pivot Point.
            </summary>
        </member>
        <member name="F:DPSF.PivotPoint3D.PivotPoint">
            <summary>
            The 3D Pivot Point that the object should rotate around.
            <para>NOTE: This only has effect when Rotational Pivot Velocity / Acceleration are used.</para>
            </summary>
        </member>
        <member name="F:DPSF.PivotPoint3D.PivotRotationalVelocity">
            <summary>
            The object's Rotational Velocity around the Pivot Point (Position change).
            <para>NOTE: Rotations are specified by giving a 3D Vector, where the direction is the axis to 
            rotate around, and the vector length is the amount (angle in radians) to rotate.
            It can also be thought of as Vector(PitchVelocity, YawVelocity, RollVelocity).</para>
            </summary>
        </member>
        <member name="F:DPSF.PivotPoint3D.PivotRotationalAcceleration">
            <summary>
            Get / Set the object's Rotational Acceleration around the Pivot Point (Position change).
            <para>NOTE: Rotations are specified by giving a 3D Vector, where the direction is the axis to 
            rotate around, and the vector length is the amount (angle in radians) to rotate.
            It can also be thought of as Vector(PitchAcceleration, YawAcceleration, RollAcceleration).</para>
            </summary>
        </member>
        <member name="M:DPSF.PivotPoint3D.#ctor(DPSF.PivotPoint3D)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cPivotPointToCopy">The PivotPoint3D object to copy</param>
        </member>
        <member name="M:DPSF.PivotPoint3D.CopyFrom(DPSF.PivotPoint3D)">
            <summary>
            Copy the given PivotPoint3D object's data into this object's data
            </summary>
            <param name="cPivotPointToCopy">The PivotPoint3D object to copy from</param>
        </member>
        <member name="M:DPSF.PivotPoint3D.#ctor(DPSF.Position3D)">
            <summary>
            Explicit Constructor. Set the Position3D object that should be affected by rotations around
            this Pivot Point.
            </summary>
            <param name="cPosition">Handle to the Position3D object to update</param>
        </member>
        <member name="M:DPSF.PivotPoint3D.#ctor(DPSF.Position3D,DPSF.Orientation3D)">
            <summary>
            Explicit Constructor. Set the Position3D and Orientation3D objects that should be affected by 
            rotational around this Pivot Point.
            </summary>
            <param name="cPosition">Handle to the Position3D object to update</param>
            <param name="cOrientation">Handle to the Orienetation3D object to update</param>
        </member>
        <member name="M:DPSF.PivotPoint3D.RotatePositionAndOrientation(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Rotates the object about its center, changing its Orientation, as well as around the 
            Pivot Point, changing its Position
            </summary>
            <param name="sRotationMatrix">The Rotation to apply to the object, rotating it 
            around the Pivot Point</param>
        </member>
        <member name="M:DPSF.PivotPoint3D.RotatePosition(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Rotates the object around the Pivot Point, changing its Position, without 
            changing its Orientation
            </summary>
            <param name="sRotationMatrix">The Rotation to apply to the object, rotating it 
            around the Pivot Point</param>
        </member>
        <member name="M:DPSF.PivotPoint3D.Update(System.Single)">
            <summary>
            Update the Position and Orientation according to the Pivot Rotational Velocity / Acceleration
            </summary>
            <param name="fElapsedTimeInSeconds">The time Elapsed in Seconds since the last Update</param>
        </member>
        <member name="M:DPSF.PivotPoint3D.RotatePositionAndOrientation(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Rotates the given Position and Orientation around the Pivot Point, changing the Position and Orientation
            </summary>
            <param name="sRotationMatrix">The Rotation to apply to the object</param>
            <param name="sPivotPoint">The Point to rotate the object around</param>
            <param name="srPosition">The Position of the object (to be modified)</param>
            <param name="srOrientation">The Orientation of the object (to be modified)</param>
        </member>
        <member name="M:DPSF.PivotPoint3D.RotatePosition(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the new Position after Rotating the given Position around the specified Pivot Point
            </summary>
            <param name="sRotationMatrix">The Rotation to apply to the Emitter</param>
            <param name="sPivotPoint">The Point to rotate the Emitter around</param>
            <param name="sPosition">The Position to be rotated around the Pivot Point</param>
            <returns>Returns the new Position after Rotating the given Position around the specified Pivot Point</returns>
        </member>
        <member name="P:DPSF.PivotPoint3D.PositionData">
            <summary>
            Get / Set the Position3D object that the Pivot Point should affect
            </summary>
        </member>
        <member name="P:DPSF.PivotPoint3D.OrientationData">
            <summary>
            Get / Set the Orientation3D object that the Pivot Point should affect
            </summary>
        </member>
        <member name="P:DPSF.PivotPoint3D.RotateOrientationToo">
            <summary>
            Specify if the Update() function should Rotate the object's Orientation too when it
            rotates the object around the Pivot Point
            </summary>
        </member>
        <member name="T:DPSF.DPSFResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:DPSF.DPSFResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:DPSF.DPSFResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:DPSF.DPSFViewerParameterAttribute">
            <summary>
            Attribute used to mark fields/methods/properties that should be shown in the DPSF Viewer.
            </summary>
        </member>
        <member name="P:DPSF.DPSFViewerParameterAttribute.Description">
            <summary>
            A user-friendly description of what the field/method/property does.
            This will be displayed to the user of the DPSF Viewer.
            </summary>
        </member>
        <member name="P:DPSF.DPSFViewerParameterAttribute.Group">
            <summary>
            The group of controls that this one should be grouped with in the DPSF Viewer.
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultBaseParticle">
            <summary>
            The Base Particle class from which the Default Particle classes inherit from
            </summary>
        </member>
        <member name="T:DPSF.DPSFParticle">
            <summary>
            Class used to hold a Particle's properties.
            This class only holds a Particle's Lifetime information, but may be inherited from
            in order to specify additional Particle properties, such as position, size, color, etc.
            </summary>
        </member>
        <member name="M:DPSF.DPSFParticle.#ctor">
            <summary>
            Constructor to initialize Particle variables
            </summary>
        </member>
        <member name="M:DPSF.DPSFParticle.UpdateElapsedTimeVariables(System.Single)">
            <summary>
            Function to update the Elapsed Time associated variables of the Particle. This is done
            automatically by DPSF when the particle system's Update() function is called, so this
            function does not need to be manually called by the user.
            </summary>
            <param name="fElapsedTimeInSeconds">The amount of time in seconds that 
            has passed since this function was last called</param>
        </member>
        <member name="M:DPSF.DPSFParticle.IsActive">
            <summary>
            Function to tell if a Particle is still Active (alive) or not
            </summary>
            <returns>Returns true if the Particle is Active (alive), false if it is Inactive (dead)</returns>
        </member>
        <member name="M:DPSF.DPSFParticle.Reset">
            <summary>
            Resets the Particles variables to default values
            </summary>
        </member>
        <member name="M:DPSF.DPSFParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy the ParticleToCopy's values into this Particle
            </summary>
            <param name="ParticleToCopy">The Particle whose values should be Copied</param>
        </member>
        <member name="P:DPSF.DPSFParticle.ElapsedTime">
            <summary>
            Get / Set how much Time has Elapsed since this Particle was born.
            <para>NOTE: Setting this to be greater than or equal to Lifetime will
            cause the Particle to become InActive and be removed from the Particle 
            System (if Lifetime is greater than zero).</para>
            <para>NOTE: Setting this also sets the Last Elapsed Time to the given value.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSFParticle.NormalizedElapsedTime">
            <summary>
            Get / Set the Normalized Elapsed Time (0.0 - 1.0) of this Particle (How far through its life it is).
            <para>NOTE: Setting this to be greater than or equal to 1.0 will cause the Particle to become InActive 
            and be removed from the Particle System (if Lifetime is greater than zero).</para>
            <para>NOTE: If the Particle has a Lifetime of zero (is set to live forever), Setting this has no effect,
            and Getting this will always return zero.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSFParticle.LastElapsedTime">
            <summary>
            Get the Elapsed Time of the Particle at the previous frame
            </summary>
        </member>
        <member name="P:DPSF.DPSFParticle.LastNormalizedElapsedTime">
            <summary>
            Get the Normalized Elapsed Time of the Particle at the previous frame
            </summary>
        </member>
        <member name="P:DPSF.DPSFParticle.Lifetime">
            <summary>
            Get / Set the Lifetime of the Particle (How long it should live for).
            <para>NOTE: Setting this to zero will make the Particle live forever.</para>
            <para>NOTE: Negative Lifetimes are reset to zero.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSFParticle.Visible">
            <summary>
            Get / Set if the Particle should be Visible (i.e. be drawn) or not
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticle.Position">
            <summary>
            The Position of the Particle in 3D space.
            <para>NOTE: For 2D Pixel and Sprite Particles, the Z value can still be used to
            determine which Particles are drawn in front of others (0.0 = front, 
            1.0 = back) when SpriteBatchOptions.eSortMode = SpriteSortMode.BackToFront
            or SpriteSortMode.FrontToBack</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticle.Color">
            <summary>
            The Color of the Particle, or if using a Texture, the Color to incorporate into the Particle's Texture.
            <para>NOTE: This Color's alpha value controls the transparency of the Particle's Texture.</para>
            <para>NOTE: This should be a Non-Premultipilied color.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticle.Velocity">
            <summary>
            The Particle's Velocity
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticle.Acceleration">
            <summary>
            The Particle's Acceleration
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticle.ExternalForce">
            <summary>
            An External Force that may be applied to the Particle
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticle.Friction">
            <summary>
            The Friction to apply to the Particle
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticle.StartColor">
            <summary>
            The Particle's Color when it is born.
            <para>NOTE: This should be a Non-Premultipilied color.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticle.EndColor">
            <summary>
            The Particle's Color when it dies
            <para>NOTE: This should be a Non-Premultipilied color.</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="P:DPSF.DPSFDefaultBaseParticle.ColorAsPremultiplied">
            <summary>
            Get the Color as a Premultiplied color (i.e. premultiplied alpha).
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultBaseParticle.StartColorAsPremultiplied">
            <summary>
            Get the Start Color as a Premultiplied color (i.e. premultiplied alpha).
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultBaseParticle.EndColorAsPremultiplied">
            <summary>
            Get the End Color as a Premultiplied color (i.e. premultiplied alpha).
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultBaseParticleSystem`2">
            <summary>
            The Base Particle System class that the Default Particle System classes inherit from
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="T:DPSF.DPSF`2">
            <summary>
            The Base Particle System Framework Class.
            This class contains the methods and properties needed to keep track of, update, and draw Particles
            </summary>
            <typeparam name="Particle">The Particle class used to hold a particle's information. The Particle class
            specified must be or inherit from the DPSFParticle class</typeparam>
            <typeparam name="Vertex">The Particle Vertex struct used to hold a vertex's information used for drawing</typeparam>
        </member>
        <member name="T:DPSF.IDPSFParticleSystem">
            <summary>
            Interface implemented by all Particle Systems.
            Variables of this type can point to any type of Particle System.
            </summary>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.Destroy">
            <summary>
            Release all resources used by the Particle System and reset all properties to their default values
            </summary>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.InitializeNonSerializableProperties(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>
            This function should be called immediately after deserializing a particle system in order to reinitialize the properties 
            that could not be serialized.
            <para>NOTE: If this type of particle system requires a Texture, this function will attempt to load the Texture specified
            by the DeserializationTexturePath property. If it is unable to load a texture, an ArgumentNullException will be thrown, so 
            this function should be wrapped in a try block, and when an ArgumentNullException is caught then the particle system's
            texture should be manually set.</para>
            <para>NOTE: This will attempt to load the Effect and Technique specified by the DeserializationEffectPath and
            DeserializationTechniqueName properties. If either of these are null, the DPSFDefaultEffect will be used, and the default
            Technique for this type of particle system will be loaded.</para>
            </summary>
            <param name="cGame">Handle to the Game object being used. You may pass in null for this parameter if not using a Game object.</param>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager used to load Effect files and Textures</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.SetWorldViewProjectionMatrices(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Set the World, View, and Projection matrices for this Particle System.
            </summary>
            <param name="cWorld">The World matrix</param>
            <param name="cView">The View matrix</param>
            <param name="cProjection">The Projection matrix</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.SetDefaultEffect">
            <summary>
            Sets the Effect to be the DPSFDefaultEffect, and the Technique to be the default technique for this type of particle system.
            This is done automatically when the particle system is initialized.
            </summary>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.SetEffectAndTechnique(System.String,System.String)">
            <summary>
            Sets the Effect and Technique to use to draw the Particles
            </summary>
            <param name="sEffect">The Asset Name of the Effect to use</param>
            <param name="sTechnique">The name of the Effect's Technique to use</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.SetEffectAndTechnique(Microsoft.Xna.Framework.Graphics.Effect,System.String)">
            <summary>
            Sets the Effect and Technique to use to draw the Particles
            </summary>
            <param name="cEffect">The Effect to use</param>
            <param name="sTechnique">The name of the Effect's Technique to use</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.SetTechnique(System.String)">
            <summary>
            Set which Technique of the current Effect to use to draw the Particles
            </summary>
            <param name="sTechnique">The name of the Effect's Technique to use</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.SetTexture(System.String)">
            <summary>
            Set the Texture to use to draw the Particles
            </summary>
            <param name="sTexture">The Asset Name of the texture file to use (found in
            the XNA Properties of the file)</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.AddParticle">
            <summary>
            Adds a new Particle to the particle system, at the start of the Active Particle List. 
            This new Particle is initialized using the particle system's Particle Initialization Function
            </summary>
            <returns>True if a particle was added, False if there is not enough memory for another Particle</returns>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.AddParticles(System.Int32)">
            <summary>
            Adds the specified number of new Particles to the particle system. 
            These new Particles are initialized using the particle systems Particle Initialization Function
            </summary>
            <param name="iNumberOfParticlesToAdd">How many Particles to Add to the particle system</param>
            <returns>Returns how many Particles were able to be added to the particle system</returns>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.RemoveAllParticles">
            <summary>
            Removes all Active Particles from the Active Particle List and adds them 
            to the Inactive Particle List
            </summary>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.Update(System.Single)">
            <summary>
            Updates the Particle System. This involves executing the Particle System
            Events, updating all Active Particles according to the Particle Events, and 
            adding new Particles according to the Emitter settings.
            </summary>
            <param name="fElapsedTimeInSeconds">How much time in seconds has 
            elapsed since the last time this function was called</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.UpdateForced(System.Single)">
            <summary>
            Updates the Particle System, even if the the Particle Systems inherits from DrawableGameComponent.
            <para>Updating the Particle System involves executing the Particle System Events, updating all Active 
            Particles according to the Particle Events, and adding new Particles according to the Emitter settings.</para>
            <para>NOTE: If inheriting from DrawableGameComponent and this is called, the Particle System will be updated
            twice per frame; once when it is called here, and again when automatically called by the Game object.
            If not inheriting from DrawableGameComponent, this acts the same as calling Update().</para>
            </summary>
            <param name="fElapsedTimeInSeconds">How much time in seconds has 
            elapsed since the last time this function was called</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.Draw">
            <summary>
            Draws all of the Active Particles to the Graphics Device
            </summary>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.DrawForced">
            <summary>
            Draws all of the Active Particles to the Graphics Device, even if the the Particle Systems inherits
            from DrawableGameComponent.
            <para>NOTE: If inheriting from DrawableGameComponent and this is called, the Particle System will be drawn
            twice per frame; once when it is called here, and again when automatically called by the Game object.
            If not inheriting from DrawableGameComponent, this acts the same as calling Draw().</para>
            </summary>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.AutoInitialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Virtual function to Initialize the Particle System with default values.
            Particle system properties should not be set until after this is called, as 
            they are likely to be reset to their default values.
            </summary>
            <param name="cGraphicsDevice">The Graphics Device the Particle System should use</param>
            <param name="cContentManager">The Content Manager the Particle System should use to load resources</param>
            <param name="cSpriteBatch">The Sprite Batch that the Sprite Particle System should use to draw its particles.
            If this is not initializing a Sprite particle system, or you want the particle system to use its own Sprite Batch,
            pass in null.</param>
        </member>
        <member name="M:DPSF.IDPSFParticleSystem.SetCameraPosition(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the Camera Position of the particle system, so that the particles know how to make themselves face the camera if needed.
            This virtual function does not do anything unless overridden, and all it should do is set an internal Vector3 variable
            (e.g. public Vector3 CameraPosition { get; set; }) to match the given Vector3.
            </summary>
            <param name="cameraPosition">The position that the camera is currently at.</param>
        </member>
        <member name="E:DPSF.IDPSFParticleSystem.UpdateOrderChanged">
            <summary>
            Event Handler that is raised when the UpdateOrder of the Particle System is changed
            </summary>
        </member>
        <member name="E:DPSF.IDPSFParticleSystem.DrawOrderChanged">
            <summary>
            Event Handler that is raised when the DrawOrder of the Particle System is changed
            </summary>
        </member>
        <member name="E:DPSF.IDPSFParticleSystem.EnabledChanged">
            <summary>
            Event Handler that is raised when the Enabled status of the Particle System is changed
            </summary>
        </member>
        <member name="E:DPSF.IDPSFParticleSystem.VisibleChanged">
            <summary>
            Event Handler that is raised when the Visible status of the Particle System is changed
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.DeserializationTexturePath">
            <summary>
            The path used to load the Texture when the InitializeNonSerializableProperties() function is called.
            <para>NOTE: This is automatically set when the SetTexture() function is called.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.DeserializationEffectPath">
            <summary>
            The path used to load the Effect when the InitializeNonSerializableProperties() function is called.
            <para>NOTE: This is automatically set when the SetEffectAndTechnique(string, string) function is called. </para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.DeserializationTechniqueName">
            <summary>
            The Name of the Technique to use when the InitializeNonSerializableProperties() function is called.
            <para>NOTE: This is automatically set when the SetEffectAndTechnique() and SetTechnique() functions are called.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.IsInitialized">
            <summary>
            Returns true if the Particle System is Initialized, false if not.
            </summary>
            <returns>Returns true if the Particle System is Initialized, false if not.</returns>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Visible">
            <summary>
            Get / Set if this Particle System should Draw its Particles or not.
            <para>NOTE: Setting this to false causes the Draw() function to not draw anything.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Enabled">
            <summary>
            Get / Set if this Particle System should Update itself and its Particles or not.
            <para>NOTE: Setting this to false causes the Update() function to not update anything.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.UpdateOrder">
            <summary>
            The Order in which the Particle System should be Updated relative to other 
            DPSF Particle Systems in the same Particle System Manager. Particle Systems 
            are Updated in ascending order according to their Update Order (i.e. lowest first).
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.DrawOrder">
            <summary>
            The Order in which the Particle System should be Drawn relative to other
            DPSF Particle Systems in the same Particle System Manager. Particle Systems
            are Drawn in ascending order according to their Draw Order (i.e. lowest first)
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Game">
            <summary>
            Get the Game object set in the constructor, if one was given.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.GraphicsDevice">
            <summary>
            Get the Graphics Device to draw to
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.InheritsDrawableGameComponent">
            <summary>
            Get if the Particle System is inheriting from DrawableGameComponent or not.
            <para>If inheriting from DrawableGameComponent, the Particle Systems
            are automatically added to the given Game object's Components and the
            Update() and Draw() functions are automatically called by the
            Game object when it updates and draws the rest of its Components.
            If the Update() and Draw() functions are called by the user anyways,
            they will exit without performing any operations, so it is suggested
            to include them anyways to make switching between inheriting and
            not inheriting from DrawableGameComponent seamless; just be aware
            that the updates and draws are actually being performed when the
            Game object is told to update and draw (i.e. when base.Update() and base.Draw()
            are called), not when these functions are being called.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.ID">
            <summary>
            Get the unique ID of this Particle System.
            <para>NOTE: Each Particle System is automatically assigned a unique ID when it is instantiated.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Type">
            <summary>
            Get / Set the Type of Particle System this is.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.ClassName">
            <summary>
            Get the Name of the Class that this Particle System is using. This can be used to 
            check what type of Particle System this is at run-time.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.ContentManager">
            <summary>
            Get / Set the Content Manager to use to load Textures and Effects.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.RenderProperties">
            <summary>
            Get the render properties used to draw the particles.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.SpriteBatchSettings">
            <summary>
            The Sprite Batch drawing Settings used in the Sprite Batch's Begin() function call.
            <para>NOTE: These settings only have effect if this is a Sprite particle system.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.AutoMemoryManagerSettings">
            <summary>
            The Settings used to control the Automatic Memory Manager.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Emitter">
            <summary>
            The Emitter is used to automatically generate new Particles.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.RandomNumber">
            <summary>
            Get a Random object used to generate Random Numbers.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.World">
            <summary>
            Get / Set the World Matrix to use for drawing 3D Particles.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.View">
            <summary>
            Get / Set the View Matrix to use for drawing 3D Particles.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Projection">
            <summary>
            Get / Set the Projection Matrix to use for drawing 3D Particles.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.WorldViewProjection">
            <summary>
            Gets the result of multiplying the World, View, and Projection matrices.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Effect">
            <summary>
            Get / Set the Effect to use to draw the Particles
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Technique">
            <summary>
            Get / Set which Technique of the current Effect to use to draw the Particles
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.Texture">
            <summary>
            Get / Set the Texture to use to draw the Particles
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.SimulationSpeed">
            <summary>
            Get / Set how fast the Particle System Simulation should run.
            <para>1.0 = normal speed, 0.5 = half speed, 2.0 = double speed.</para>
            <para>NOTE: If a negative value is specified, the Speed Scale is set 
            to zero (pauses the simulation; has same effect as Enabled = false).</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.InternalSimulationSpeed">
            <summary>
            Get / Set how fast the Particle System Simulation should run to look "normal".
            <para>1.0 = normal speed, 0.5 = half speed, 2.0 = double speed.</para>
            <para>This is provided as a way of speeding up / slowing down the simulation to have 
            it look as desired, without having to rescale all of the particle velocities, etc. This allows
            you to use the exact same particle system class to create two particle systems, and then have one run
            slower or faster than the other, creating two different effects. If you then wanted to speed up or slow down
            both effects (i.e. particle systems), you could adjust the SimulationSpeed property on both particle systems 
            without having to worry about adjusting this property at all to get the effects back to normal speed; just reset 
            the SimulationSpeed property you changed back to 1.0.</para>
            <para>NOTE: If a negative value is specified, the Internal Simulation Speed is set to zero 
            (pauses the simulation; has the same effect as Enabled = false).</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.UpdatesPerSecond">
            <summary>
            Specify how often the Particle System should be Updated.
            <para>NOTE: Specifying a value of zero (default) will cause the Particle 
            System to be Updated every time the Update() function is called 
            (i.e. as often as possible).</para>
            <para>NOTE: If the Update() function is not called often enough to
            keep up with this specified Update rate, the Update function
            updates the Particle Systems as often as possible.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.PerformanceProfilingIsEnabled">
            <summary>
            Get / Set if performance timings should be measured or not, such as how long it takes to perform updates and draws.
            <para>This should be disabled before building a release version of your application.</para>
            <para>Note: Performance profiling is not available on the Reach profile, so this will always return False on the Reach profile.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.PerformanceTimeToDoUpdateInMilliseconds">
            <summary>
            Get how long (in milliseconds) it took to perform the last Update() function call.
            <para>Returns 0 if Performance Profiling is not Enabled.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.PerformanceTimeToDoDrawInMilliseconds">
            <summary>
            Get how long (in milliseconds) it took to perform the last Draw() function call.
            <para>Returns 0 if Performance Profiling is not Enabled.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.ParticleSystemManagerToCopyPropertiesFrom">
            <summary>
            The Particle System Manager whose properties (SimulationSpeed and 
            UpdatesPerSecond) this particle system should follow.
            <para>NOTE: This Particle System's properties will only clone the Manager's properties
            if the Manager's properties are Enabled. For example, the Manager's SimulationSpeed
            will only be copied to this Particle System if the Manager's SimulationSpeedIsEnabled
            property is true.</para>
            <para>NOTE: This value is automatically set to the last Particle System Manager this 
            Particle System is added to.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.ParticleType">
            <summary>
            Get the type of Particles that this Particle System should draw.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.NumberOfParticlesAllocatedInMemory">
            <summary>
            Get / Set the absolute Number of Particles to Allocate Memory for.
            <para>NOTE: This value must be greater than or equal to zero.</para>
            <para>NOTE: Even if this many particles aren't used, the space for this many Particles 
            is still allocated in memory.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.MaxNumberOfParticlesAllowed">
            <summary>
            Get / Set the Max Number of Particles this Particle System is Allowed to contain at any given time.
            <para>NOTE: The Automatic Memory Manager will never allocate space for more Particles than this.</para>
            <para>NOTE: This value must be greater than or equal to zero.</para>
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.NumberOfActiveParticles">
            <summary>
            Get the number of Particles that are currently Active
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.NumberOfParticlesBeingDrawn">
            <summary>
            Get the number of Particles being Drawn. That is, how many Particles 
            are both Active AND Visible.
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleSystem.NumberOfParticlesStillPossibleToAdd">
            <summary>
            Get the number of Particles that may still be added before reaching the
            Max Number Of Particles Allowed. If the Max Number Of Particles Allowed is 
            greater than the Number Of Particles Allocated In Memory AND the Auto Memory Manager is
            set to not increase the amount of Allocated Memory, than this returns the number 
            of Particles that may still be added before running out of Memory.
            </summary>
        </member>
        <member name="F:DPSF.DPSF`2._totalNumberOfParticleSystemsCreated">
            <summary>
            A static int used to keep track of the total number of Particle Systems created
            </summary>
        </member>
        <member name="F:DPSF.DPSF`2._numberOfParticleSystemsCurrentlyInitialized">
            <summary>
            A static int used to keep track of how many DPSF particle systems are initialized at any given moment.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeNoDisplayParticleSystem(System.Int32,System.Int32)">
            <summary>
            Initializes a new No Display Particle System. This type of Particle System does not allow any of the Particles
            to be drawn to a Graphics Device (e.g. the screen).
            </summary>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. If the Auto Memory Manager is enabled (default), this will be dynamically adjusted at
            run-time to make sure there is always roughly as much Memory Allocated as there are Particles. This value
            may also be adjusted manually at run-time.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. If the Auto Memory Manager will not be enabled to increase
            memory, this should be less than or equal to the Number Of Particles To Allocate Memory For, 
            as the Particle System can only handle as many Particles as it has Memory Allocated For. Also, the
            Auto Memory Manager will never increase the Allocated Memory to handle more Particles than this value. 
            If this is set to a value lower than the Number Of Particles To Allocate Memory For, then only this many
            Particles will be allowed, even though there is memory allocated for more Particles. This value 
            may also be adjusted manually at run-time.</param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeSpriteParticleSystem(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new Sprite Particle System
            </summary>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager used to load Effect files and Textures</param>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. If the Auto Memory Manager is enabled (default), this will be dynamically adjusted at
            run-time to make sure there is always roughly as much Memory Allocated as there are Particles. This value
            may also be adjusted manually at run-time.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. If the Auto Memory Manager will not be enabled to increase
            memory, this should be less than or equal to the Number Of Particles To Allocate Memory For, 
            as the Particle System can only handle as many Particles as it has Memory Allocated For. Also, the
            Auto Memory Manager will never increase the Allocated Memory to handle more Particles than this value. 
            If this is set to a value lower than the Number Of Particles To Allocate Memory For, then only this many
            Particles will be allowed, even though there is memory allocated for more Particles. This value 
            may also be adjusted manually at run-time.</param>
            <param name="sTexture">The asset name of the Texture to use to visualize the Particles</param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeSpriteParticleSystem(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Int32,System.Int32,System.String,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes a new Sprite Particle System
            </summary>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager used to load Effect files and Textures</param>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. If the Auto Memory Manager is enabled (default), this will be dynamically adjusted at
            run-time to make sure there is always roughly as much Memory Allocated as there are Particles. This value
            may also be adjusted manually at run-time.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. If the Auto Memory Manager will not be enabled to increase
            memory, this should be less than or equal to the Number Of Particles To Allocate Memory For, 
            as the Particle System can only handle as many Particles as it has Memory Allocated For. Also, the
            Auto Memory Manager will never increase the Allocated Memory to handle more Particles than this value. 
            If this is set to a value lower than the Number Of Particles To Allocate Memory For, then only this many
            Particles will be allowed, even though there is memory allocated for more Particles. This value 
            may also be adjusted manually at run-time.</param>
            <param name="sTexture">The asset name of the Texture to use to visualize the Particles</param>
            <param name="cSpriteBatchToDrawWith">The Sprite Batch that this particle system should use to draw its
            particles with.
            <para>If null, the particle system will use its own SpriteBatch to draw its particles.</para>
            <para>If not null, then you must call SpriteBatch.Begin() before calling ParticleSystem.Draw() to
            draw the particle system, and then call SpriteBatch.End() when done drawing the particle system.</para></param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeSpriteParticleSystem(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new Sprite Particle System
            </summary>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager used to load Effect files and Textures</param>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. If the Auto Memory Manager is enabled (default), this will be dynamically adjusted at
            run-time to make sure there is always roughly as much Memory Allocated as there are Particles. This value
            may also be adjusted manually at run-time.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. If the Auto Memory Manager will not be enabled to increase
            memory, this should be less than or equal to the Number Of Particles To Allocate Memory For, 
            as the Particle System can only handle as many Particles as it has Memory Allocated For. Also, the
            Auto Memory Manager will never increase the Allocated Memory to handle more Particles than this value. 
            If this is set to a value lower than the Number Of Particles To Allocate Memory For, then only this many
            Particles will be allowed, even though there is memory allocated for more Particles. This value 
            may also be adjusted manually at run-time.</param>
            <param name="cTexture">The Texture to use to visualize the Particles</param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeSpriteParticleSystem(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Initializes a new Sprite Particle System
            </summary>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager used to load Effect files and Textures</param>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. If the Auto Memory Manager is enabled (default), this will be dynamically adjusted at
            run-time to make sure there is always roughly as much Memory Allocated as there are Particles. This value
            may also be adjusted manually at run-time.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. If the Auto Memory Manager will not be enabled to increase
            memory, this should be less than or equal to the Number Of Particles To Allocate Memory For, 
            as the Particle System can only handle as many Particles as it has Memory Allocated For. Also, the
            Auto Memory Manager will never increase the Allocated Memory to handle more Particles than this value. 
            If this is set to a value lower than the Number Of Particles To Allocate Memory For, then only this many
            Particles will be allowed, even though there is memory allocated for more Particles. This value 
            may also be adjusted manually at run-time.</param>
            <param name="cTexture">The Texture to use to visualize the Particles</param>
            <param name="cSpriteBatchToDrawWith">The Sprite Batch that this particle system should use to draw its
            particles with.
            <para>If null, the particle system will use its own SpriteBatch to draw its particles.</para>
            <para>If not null, then you must call SpriteBatch.Begin() before calling ParticleSystem.Draw() to
            draw the particle system, and then call SpriteBatch.End() when done drawing the particle system.</para></param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeQuadParticleSystem(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Int32,System.Int32,DPSF.DPSF{`0,`1}.UpdateVertexDelegate)">
            <summary>
            Initializes a new Quad Particle System
            </summary>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager used to load Effect files and Textures</param>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. If the Auto Memory Manager is enabled (default), this will be dynamically adjusted at
            run-time to make sure there is always roughly as much Memory Allocated as there are Particles. This value
            may also be adjusted manually at run-time.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. If the Auto Memory Manager will not be enabled to increase
            memory, this should be less than or equal to the Number Of Particles To Allocate Memory For, 
            as the Particle System can only handle as many Particles as it has Memory Allocated For. Also, the
            Auto Memory Manager will never increase the Allocated Memory to handle more Particles than this value. 
            If this is set to a value lower than the Number Of Particles To Allocate Memory For, then only this many
            Particles will be allowed, even though there is memory allocated for more Particles. This value 
            may also be adjusted manually at run-time.</param>
            <param name="cVertexUpdateFunction">Function used to copy a Particle's drawable properties into the vertex buffer</param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeTexturedQuadParticleSystem(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Int32,System.Int32,DPSF.DPSF{`0,`1}.UpdateVertexDelegate,System.String)">
            <summary>
            Initializes a new Textured Quad Particle System
            </summary>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager used to load Effect files and Textures</param>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. If the Auto Memory Manager is enabled (default), this will be dynamically adjusted at
            run-time to make sure there is always roughly as much Memory Allocated as there are Particles. This value
            may also be adjusted manually at run-time.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. If the Auto Memory Manager will not be enabled to increase
            memory, this should be less than or equal to the Number Of Particles To Allocate Memory For, 
            as the Particle System can only handle as many Particles as it has Memory Allocated For. Also, the
            Auto Memory Manager will never increase the Allocated Memory to handle more Particles than this value. 
            If this is set to a value lower than the Number Of Particles To Allocate Memory For, then only this many
            Particles will be allowed, even though there is memory allocated for more Particles. This value 
            may also be adjusted manually at run-time.</param>
            <param name="cVertexUpdateFunction">Function used to copy a Particle's drawable properties into the vertex buffer</param>
            <param name="sTexture">The asset name of the Texture to use to visualize the Particles</param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeTexturedQuadParticleSystem(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Int32,System.Int32,DPSF.DPSF{`0,`1}.UpdateVertexDelegate,Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Initializes a new Textured Quad Particle System
            </summary>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager used to load Effect files and Textures</param>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. If the Auto Memory Manager is enabled (default), this will be dynamically adjusted at
            run-time to make sure there is always roughly as much Memory Allocated as there are Particles. This value
            may also be adjusted manually at run-time.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. If the Auto Memory Manager will not be enabled to increase
            memory, this should be less than or equal to the Number Of Particles To Allocate Memory For, 
            as the Particle System can only handle as many Particles as it has Memory Allocated For. Also, the
            Auto Memory Manager will never increase the Allocated Memory to handle more Particles than this value. 
            If this is set to a value lower than the Number Of Particles To Allocate Memory For, then only this many
            Particles will be allowed, even though there is memory allocated for more Particles. This value 
            may also be adjusted manually at run-time.</param>
            <param name="cVertexUpdateFunction">Function used to copy a Particle's drawable properties into the vertex buffer</param>
            <param name="cTexture">The Texture to use to visualize the Particles</param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeCommonVariables(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,System.Int32,System.Int32,DPSF.ParticleTypes)">
            <summary>
            Initialize the variables common to all Particle Systems
            </summary>
            <param name="cGraphicsDevice">Graphics Device to draw to</param>
            <param name="cContentManager">Content Manager to use to load Effect files and Textures</param>
            <param name="iNumberOfParticlesToAllocateMemoryFor">The Number of Particles memory should
            be Allocated for. The Maximum Number Of Particles the Particle System should Allow is also
            set to this value initially.</param>
            <param name="iMaxNumberOfParticlesToAllow">The Maximum Number of Active Particles that are
            Allowed at a single point in time. This should be less than or equal to the Number Of Particles 
            To Allocate Memory For if the Auto Memory Manager will not be used, as the Particle System 
            can only handle as many Particles as it has Memory Allocated For.</param>
            <param name="eParticleType">The Type of Particles this Particle System should draw</param>
        </member>
        <member name="M:DPSF.DPSF`2.Destroy">
            <summary>
            Release all resources used by the Particle System and reset all properties to their default values
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DPSF.DPSF`2.InitializeNonSerializableProperties(Microsoft.Xna.Framework.Game,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager)" -->
        <member name="M:DPSF.DPSF`2.SetGraphicsDevice(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Sets the Graphics Device to use to the given graphics device.
            <para>NOTE: This only has an effect if the particle system does not inherit from DrawableGameComponent
            (i.e. InheritsDrawableGameComponent == false. i.e. using the DPSF.dll, not DPSFAsDrawableGameComponent.dll), since 
            the Graphics Device is read-only when inheriting from DrawableGameComponent. The Game object's Graphics Device
            is always used when inheriting from DrawableGameComponent.</para>
            </summary>
            <param name="graphicsDevice">The graphics device to use.</param>
        </member>
        <member name="M:DPSF.DPSF`2.SetWorldViewProjectionMatrices(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Set the World, View, and Projection matrices for this Particle System.
            <para>NOTE: Sprite particle systems are not affected by the World, View, and Projection matrices.</para>
            </summary>
            <param name="cWorld">The World matrix</param>
            <param name="cView">The View matrix</param>
            <param name="cProjection">The Projection matrix</param>
        </member>
        <member name="M:DPSF.DPSF`2.SetVertexDeclaration(System.Int32,Microsoft.Xna.Framework.Graphics.VertexElement[])">
            <summary>
            Sets the vertex elements to use for each vertex of a particle.
            </summary>
            <param name="numberOfBytesPerVertex">The number of bytes per vertex.</param>
            <param name="elements">The vertex elements that make up the vertex.</param>
        </member>
        <member name="M:DPSF.DPSF`2.SetDefaultEffect">
            <summary>
            Sets the Effect to be the default type for this type of particle system.
            This is done automatically when the particle system is initialized.
            <para>Default effect for each particle type is:</para>
            <list type="number">
                <item><description>NoDisplay and Sprite - null.</description></item>
                <item><description>Quad - BasicEffect.</description></item>
                <item><description>TexturedQuad - AlphaTestEffect.</description></item>
            </list>
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.SetEffectAndTechnique(System.String,System.String)">
            <summary>
            Sets the Effect and Technique to use to draw the Particles.
            <para>NOTE: This will automatically set the DeserializationEffectPath property to the given sEffect.</para>
            <para>NOTE: This will automatically set the DeserializationTechniqueName property to the given sTechnique.</para>
            </summary>
            <param name="sEffect">The Asset Name of the Effect to use</param>
            <param name="sTechnique">The name of the Effect's Technique to use</param>
        </member>
        <member name="M:DPSF.DPSF`2.SetEffectAndTechnique(Microsoft.Xna.Framework.Graphics.Effect,System.String)">
            <summary>
            Sets the Effect and Technique to use to draw the Particles.
            <para>NOTE: This will automatically set the DeserializationTechniqueName property to the given sTechnique.</para>
            </summary>
            <param name="cEffect">The Effect to use</param>
            <param name="sTechnique">The name of the Effect's Technique to use</param>
        </member>
        <member name="M:DPSF.DPSF`2.SetTechnique(System.String)">
            <summary>
            Set which Technique of the current Effect to use to draw the Particles.
            <para>NOTE: This will automatically set the DeserializationTechniqueName property to the given sTechnique.</para>
            </summary>
            <param name="sTechnique">The name of the Effect's Technique to use</param>
        </member>
        <member name="M:DPSF.DPSF`2.SetTexture(System.String)">
            <summary>
            Set the Texture to use to draw the Particles
            </summary>
            <param name="sTexture">The Asset Name of the texture file to use (found in
            the XNA Properties of the file)</param>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeParticleArrays">
            <summary>
            This allocates the proper amount of space for the Particles and initializes the variables used to draw the Type of Particles specified. 
            For example, if using Textured Quads extra space will need to be allocated to hold the Particles, as each Quad Particle requires four 
            vertices, not one like Point Sprites. Also, the Index Buffer would be initialized, as it is required to draw Quads.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeParticle(`0)">
            <summary>
            Initialize the given Particle using the current Initialization Function
            </summary>
            <param name="cParticle">The Particle to Initialize</param>
        </member>
        <member name="M:DPSF.DPSF`2.AddParticle">
            <summary>
            Adds a new Particle to the particle system, at the start of the Active Particle List. 
            This new Particle is initialized using the particle system's Particle Initialization Function
            </summary>
            <returns>True if a particle was added, False if there is not enough memory for another Particle</returns>
        </member>
        <member name="M:DPSF.DPSF`2.AddParticle(`0)">
            <summary>
            Adds a new Particle to the particle system, at the start of the Active Particle List. Returns true if
            the Particle was added, false if there is not enough memory for another Particle.
            </summary>
            <param name="cParticleToCopy">The Particle to add to the Particle System. If this is null then a
            new Particle is initialized using the particle system's Particle Initialization Function</param>
            <returns>True if a particle was added, False if there is not enough memory for another Particle</returns>
        </member>
        <member name="M:DPSF.DPSF`2.AddParticles(System.Int32)">
            <summary>
            Adds the specified number of new Particles to the particle system. 
            These new Particles are initialized using the particle systems Particle Initialization Function
            </summary>
            <param name="iNumberOfParticlesToAdd">How many Particles to Add to the particle system</param>
            <returns>Returns how many Particles were able to be added to the particle system</returns>
        </member>
        <member name="M:DPSF.DPSF`2.AddParticles(System.Int32,`0)">
            <summary>
            Adds the specified number of new Particles to the particle system, copying the 
            properties of the given Particle To Copy
            </summary>
            <param name="iNumberOfParticlesToAdd">How many copyies of the Particle To Copy to Add 
            to the particle system</param>
            <param name="cParticleToCopy">The Particle to copy from when Adding the Particles to the 
            Particle System. If this is null then the new Particles will be initialized using the 
            particle system's Particle Initialization Function</param>
            <returns>Returns how many Particles were able to be added to the particle system</returns>
        </member>
        <member name="M:DPSF.DPSF`2.RemoveAllParticles">
            <summary>
            Removes all Active Particles from the Active Particle List and adds them 
            to the Inactive Particle List
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.Update(System.Single)">
            <summary>
            Updates the Particle System. This involves executing the Particle System
            Events, updating all Active Particles according to the Particle Events, and 
            adding new Particles according to the Emitter settings.
            <para>NOTE: This will only Update the Particle System if it does not inherit from DrawableGameComponent, 
            since if it does it will be updated automatically by the Game object.</para>
            </summary>
            <param name="fElapsedTimeInSeconds">How much time in seconds has 
            elapsed since the last time this function was called</param>
        </member>
        <member name="M:DPSF.DPSF`2.UpdateForced(System.Single)">
            <summary>
            Updates the Particle System, even if the the Particle Systems inherits from DrawableGameComponent.
            <para>Updating the Particle System involves executing the Particle System Events, updating all Active 
            Particles according to the Particle Events, and adding new Particles according to the Emitter settings.</para>
            <para>NOTE: If inheriting from DrawableGameComponent and this is called, the Particle System will be updated
            twice per frame; once when it is called here, and again when automatically called by the Game object.
            If not inheriting from DrawableGameComponent, this acts the same as calling Update().</para>
            </summary>
            <param name="fElapsedTimeInSeconds">How much time in seconds has 
            elapsed since the last time this function was called</param>
        </member>
        <member name="M:DPSF.DPSF`2.Update(System.Single,System.Boolean)">
            <summary>
            Updates the Particle System. This involves executing the Particle System
            Events, updating all Active Particles according to the Particle Events, and 
            adding new Particles according to the Emitter's settings.
            </summary>
            <param name="fElapsedTimeInSeconds">How much time in seconds has 
            elapsed since the last time this function was called</param>
            <param name="bCalledByDrawableGameComponent">Indicates if this function was
            called manually by the user or called automatically by the Drawable Game Component.
            If this function Inherits Drawable Game Component, but was not called by
            Drawable Game Component, nothing will be updated since the Particle System will
            automatically be updated when the Game Component's Update() function is called.</param>
        </member>
        <member name="M:DPSF.DPSF`2.AddParticleToVertexBuffer(`0)">
            <summary>
            Adds the given Particle to the list of Particles to be Drawn (i.e. the Vertex Buffer), if it is Visible
            </summary>
            <param name="cParticle">The Particle to add to the Vertex Buffer</param>
        </member>
        <member name="M:DPSF.DPSF`2.Draw">
            <summary>
            Draws all of the Active Particles to the Graphics Device.
            <para>NOTE: This will only Draw the Particle System if it does not inherit from DrawableGameComponent, 
            since if it does it will be drawn automatically by the Game object.</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.DrawForced">
            <summary>
            Draws all of the Active Particles to the Graphics Device, even if the the Particle Systems inherits
            from DrawableGameComponent.
            <para>NOTE: If inheriting from DrawableGameComponent and this is called, the Particle System will be drawn
            twice per frame; once when it is called here, and again when automatically called by the Game object.
            If not inheriting from DrawableGameComponent, this acts the same as calling Draw().</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.Draw(System.Boolean)">
            <summary>
            Draws all of the Active Particles to the Graphics Device
            </summary>
            <param name="bCalledByDrawableGameComponent">Indicates if this function was
            called manually by the user or called automatically by the Drawable Game Component.
            If this function Inherits Drawable Game Component, but was not called by
            Drawable Game Component, nothing will be drawn since the Particle System will
            automatically be drawn when the Game Component's Draw() function is called.</param>
        </member>
        <member name="M:DPSF.DPSF`2.ClearRenderStates">
            <summary>
            Resets all of the Sampler States and Vertex Sampler States on the Graphics Device.
            This must be done before any rendering to prevent an XNA 4 bug that causes the graphics device
            to incorrectly track state information, which manifests itself as run-time errors.
            https://connect.microsoft.com/site226/feedback/details/586216/cloned-effect-?wa=wsignin1.0
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.ApplyRenderState">
            <summary>
            Applies the Particle System's Render State properties to the Graphics Device.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.AutoInitialize(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Virtual function to Initialize the Particle System with default values.
            Particle system properties should not be set until after this is called, as 
            they are likely to be reset to their default values.
            </summary>
            <param name="cGraphicsDevice">The Graphics Device the Particle System should use</param>
            <param name="cContentManager">The Content Manager the Particle System should use to load resources</param>
            <param name="cSpriteBatch">The Sprite Batch that the Sprite Particle System should use to draw its particles.
            If this is not initializing a Sprite particle system, or you want the particle system to use its own Sprite Batch,
            pass in null.</param>
        </member>
        <member name="M:DPSF.DPSF`2.SetCameraPosition(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the Camera Position of the particle system, so that the particles know how to make themselves face the camera if needed.
            This virtual function does not do anything unless overridden, and all it should do is set an internal Vector3 variable
            (e.g. public Vector3 CameraPosition { get; set; }) to match the given Vector3.
            </summary>
            <param name="cameraPosition">The position that the camera is currently at.</param>
        </member>
        <member name="M:DPSF.DPSF`2.DrawSprite(DPSF.DPSFParticle,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Virtual function to draw a Sprite Particle. This function should be used to draw the given
            Particle with the provided SpriteBatch.
            </summary>
            <param name="Particle">The Particle Sprite to Draw</param>
            <param name="cSpriteBatch">The SpriteBatch to use to doing the Drawing</param>
        </member>
        <member name="M:DPSF.DPSF`2.AfterInitialize">
            <summary>
            Virtual function that is called at the end of the Initialize() function.
            This may be used to perform operations after the Particle System has been Initialized, such as 
            initializing other Particle Systems nested within this Particle System.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.BeforeDestroy">
            <summary>
            Virtual function that is called at the beginning of the Destroy() function.
            This may be used to perform operations before the Destroy() code is executed.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.AfterDestroy">
            <summary>
            Virtual function that is called at the end of the Destroy() function.
            This may be used to perform operations after the Particle System has been Destroyed, such as 
            to destroy other Particle Systems nested within this Particle System.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.BeforeUpdate(System.Single)">
            <summary>
            Virtual function that is called at the beginning of the Update() function.
            This may be used to perform operations before the Update() code is executed.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.AfterUpdate(System.Single)">
            <summary>
            Virtual function that is called at the end of the Update() function.
            This may be used to perform operations after the Particle System has been updated, such as 
            to Update Particle Systems nested within this Particle System.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.BeforeDraw">
            <summary>
            Virtual function that is called at the beginning of the Draw() function.
            This may be used to perform operations before the Draw() code is executed.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.AfterDraw">
            <summary>
            Virtual function that is called at the end of the Draw() function.
            This may be used to perform operations after the Particle System has been drawn, such as 
            to Draw Particle Systems nested within this Particle System.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.BeforeAddParticle">
            <summary>
            Virtual function that is called at the beginning of the AddParticle() function.
            This may be used to execute some code before a new Particle is initialized and added.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.AfterAddParticle">
            <summary>
            Virtual function that is called at the end of the AddParticle() function.
            This may be used to execute some code after a new Particle is initialized and added.
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.InitializeRenderProperties">
            <summary>
            Virtual function to setup the Render Properties (i.e. BlendState, DepthStencilState, RasterizerState, and SamplerState)
            which will be applied to the Graphics Device before drawing the Particle System's Particles.
            <para>This function is only called once when initializing the particle system.</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.SetEffectParameters">
            <summary>
            Virtual function to Set the Effect's Parameters before drawing the Particles.
            <para>This is called every time before the particle system is drawn.</para>
            </summary>
        </member>
        <member name="E:DPSF.DPSF`2.UpdateOrderChanged">
            <summary>
            Raised when the UpdateOrder property changes
            </summary>
        </member>
        <member name="E:DPSF.DPSF`2.DrawOrderChanged">
            <summary>
            Raised when the DrawOrder property changes
            </summary>
        </member>
        <member name="E:DPSF.DPSF`2.EnabledChanged">
            <summary>
            Raised when the Enabled property changes
            </summary>
        </member>
        <member name="E:DPSF.DPSF`2.VisibleChanged">
            <summary>
            Raised when the Visible property changes
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.DeserializationTexturePath">
            <summary>
            The path used to load the Texture when the InitializeNonSerializableProperties() function is called.
            <para>NOTE: This is automatically set when the SetTexture() function is called.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.DeserializationEffectPath">
            <summary>
            The path used to load the Effect when the InitializeNonSerializableProperties() function is called.
            <para>NOTE: This is automatically set when the SetEffectAndTechnique(string, string) function is called. </para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.DeserializationTechniqueName">
            <summary>
            The Name of the Technique to use when the InitializeNonSerializableProperties() function is called.
            <para>NOTE: This is automatically set when the SetEffectAndTechnique() and SetTechnique() functions are called.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.IsInitialized">
            <summary>
            Returns true if the Particle System is Initialized, false if not.
            </summary>
            <returns>Returns true if the Particle System is Initialized, false if not.</returns>
        </member>
        <member name="P:DPSF.DPSF`2.DPSFDefaultEffect">
            <summary>
            A custom effect provided by DPSF. In DPSF v2.1.0 and prior this effect was used as the default effect for all particle system types.
            Each particle system type now uses one of the built-in XNA 4 effects as its default effect in order to make all of the particle system types
            fully compatible with the Reach profile, and usable on the Windows Phone 7.
            <para>This effect may still be used for a particle system by calling the SetEffectAndTechnique() function from the particle system's overridden
            InitializeRenderProperties() function.</para>
            <para>This Effect has several techniques that may be used (<see cref="T:DPSF.DPSFDefaultEffectTechniques"/>).</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Visible">
            <summary>
            Get / Set if this Particle System should Draw its Particles or not.
            <para>NOTE: Setting this to false causes the Draw() function to not draw anything, including the 
            BeforeDraw() and AfterDraw() functions not to be called.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Enabled">
            <summary>
            Get / Set if this Particle System should Update itself and its Particles or not.
            <para>NOTE: Setting this to false causes the Update() function to not update anything.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.UpdateOrder">
            <summary>
            The Order in which the Particle System should be Updated relative to other 
            DPSF Particle Systems in the same Particle System Manager. Particle Systems 
            are Updated in ascending order according to their Update Order (i.e. lowest first).
            <para>NOTE: The Update Order is one of the few properties that is not reset when
            the particle system is initialized or destroyed.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.DrawOrder">
            <summary>
            The Order in which the Particle System should be Drawn relative to other
            DPSF Particle Systems in the same Particle System Manager. Particle Systems
            are Drawn in ascending order according to their Draw Order (i.e. lowest first).
            <para>NOTE: The Draw Order is one of the few properties that is not reset when
            the particle system is initialized or destroyed.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Game">
            <summary>
            Get the Game object set in the constructor, if one was given.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.GraphicsDevice">
            <summary>
            Get / Set the Graphics Device to draw to
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.InheritsDrawableGameComponent">
            <summary>
            Get if the Particle System is inheriting from DrawableGameComponent or not.
            <para>If inheriting from DrawableGameComponent, the Particle Systems
            are automatically added to the given Game object's Components and the
            Update() and Draw() functions are automatically called by the
            Game object when it updates and draws the rest of its Components.
            If the Update() and Draw() functions are called by the user anyways,
            they will exit without performing any operations, so it is suggested
            to include them anyways to make switching between inheriting and
            not inheriting from DrawableGameComponent seemless; just be aware
            that the updates and draws are actually being performed when the
            Game object is told to update and draw (i.e. when base.Update() and base.Draw()
            are called), not when these functions are being called.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ID">
            <summary>
            Get the unique ID of this Particle System.
            <para>NOTE: Each Particle System is automatically assigned a unique ID when it is instanciated.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Type">
            <summary>
            Get / Set the Type of Particle System this is. This is a user provided value that you can use for whatever
            purpose you want; it is not used by the built-in DPSF functionality in any way.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ClassName">
            <summary>
            Get the Name of the Class that this Particle System is using. This can be used to 
            check what type of Particle System this is at run-time.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ContentManager">
            <summary>
            Get / Set the Content Manager to use to load Textures and Effects
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.IndexBuffer">
            <summary>
            Get / Set the Index Buffer values. The Index Buffer is used when drawing Quads in the HiDef profile.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.IndexBufferReach">
            <summary>
            Get / Set the Index Buffer values. The Index Buffer Reach is used when drawing Quads in the Reach profile.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.IndexBufferIndex">
            <summary>
            Get / Set the current position in the Index Buffer
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ParticleEvents">
            <summary>
            Particle Events may be used to update Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ParticleSystemEvents">
            <summary>
            Particle System Events may be used to update the Particle System
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.RenderProperties">
            <summary>
            Get the render properties used to draw the particles.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.UsingExternalSpriteBatchToDrawParticles">
            <summary>
            Returns if this particle system is dependent on an external Sprite Batch to draw its particles or not.
            <para>If false, the particle system will use its own SpriteBatch to draw its particles.</para>
            <para>If true, then you must call SpriteBatch.Begin() before calling ParticleSystem.Draw() to
            draw the particle system, and then call SpriteBatch.End() when done drawing the particle system, where
            the SpriteBatch referred to here is the one you passed into the InitializeSpriteParticleSystem() function.</para>
            <para>NOTE: This property only applies to Sprite particle systems.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.SpriteBatchSettings">
            <summary>
            The Sprite Batch drawing Settings used in the Sprite Batch's Begin() function call.
            <para>NOTE: These settings are only available for Sprite particle systems, and only for
            the Sprite particle systems using their own SpriteBatch (i.e. UsingExternalSpriteBatchToDrawParticles = false).</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.AutoMemoryManagerSettings">
            <summary>
            The Settings used to control the Automatic Memory Manager
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Emitter">
            <summary>
            The Emitter is used to automatically generate new Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.LerpEmittersPositionAndOrientation">
            <summary>
            This property tells if the we should Lerp (Linearly Interpolate) the Position and Orientation of the Emitter from one update to 
            the next. If the Emitter is moving very fast, this allows the particle system to spawn new particles in between the Emitter's old
            and new position, so that new particles are evenly spaced out between the Emitter's previous and current position, instead of all 
            of the particles being spawned at the Emitter's new position.
            <para>If this property is true, the Emitter's Position and Orientation will be Lerped while emitting particles.</para>
            <para>If this property is false, all of the particles will be emitted as the Emitter's current Position and Orientation.</para>
            <para>If you generally want Lerping enabled, but want to temporarily disable it to "teleport" the emitter from one position
            to another without particles being Lerped between the two positions, you can set this properly to false and then back to true 
            after the particle system's Update() function has been called, or you can simply set the LerpEmittersPositionAndOrientationOnNextUpdate
            to false, which will disable Lerping the position and orientation only for the next particle system Update().</para>
            <para>Default is true.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.LerpEmittersPositionAndOrientationOnNextUpdate">
            <summary>
            If this is true the Emitter's Position and Orientation will not be Lerped during the particle system's next Update() function call.
            The Update() function will always set this value back to false after all of the particle's have been emitted for that Update() call.
            <para>Setting this to true allows you to "teleport" the Emitter from one position to another without particles being released at any
            positions in between the Emitter's old and new Position and Orientation.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.RandomNumber">
            <summary>
            Get a RandomNumbers object used to generate Random Numbers
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.World">
            <summary>
            Get / Set the World Matrix to use for drawing 3D Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.View">
            <summary>
            Get / Set the View Matrix to use for drawing 3D Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Projection">
            <summary>
            Get / Set the Projection Matrix to use for drawing 3D Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.WorldViewProjection">
            <summary>
            Gets the result of multiplying the World, View, and Projection matrices.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.VertexElement">
            <summary>
            Set the VertexElement (i.e. Vertex Format) to use for each vertex of a Particle.
            <para>NOTE: VertexElement will not be changed if null value is given.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.VertexUpdateFunction">
            <summary>
            Set the function to use to copy a Particle's renderable properties into the Vertex Buffer.
            <para>NOTE: VertexUpdateFunction will not be changed if null value is given.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ParticleInitializationFunction">
            <summary>
            Sets the function to use to Initialize a Particle's properties.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Effect">
            <summary>
            Get / Set the Effect to use to draw the Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Technique">
            <summary>
            Get / Set which Technique of the current Effect to use to draw the Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Texture">
            <summary>
            Get / Set the Texture to use to draw the Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.SimulationSpeed">
            <summary>
            Get / Set how fast the Particle System Simulation should run.
            <para>Example: 1.0 = normal speed, 0.5 = half speed, 2.0 = double speed.</para>
            <para>NOTE: If a negative value is specified, the Speed Scale is set 
            to zero (pauses the simulation; has same effect as Enabled = false).</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.InternalSimulationSpeed">
            <summary>
            Get / Set how fast the Particle System Simulation should run to look "normal".
            <para>1.0 = normal speed, 0.5 = half speed, 2.0 = double speed.</para>
            <para>This is provided as a way of speeding up / slowing down the simulation to have 
            it look as desired, without having to rescale all of the particle velocities, etc. This allows
            you to use the exact same particle system class to create two particle systems, and then have one run
            slower or faster than the other, creating two different effects. If you then wanted to speed up or slow down
            both effects (i.e. particle systems), you could adjust the SimulationSpeed property on both particle systems 
            without having to worry about adjusting this property at all to get the effects back to normal speed; just reset 
            the SimulationSpeed property you changed back to 1.0.</para>
            <para>NOTE: If a negative value is specified, the Internal Simulation Speed is set to zero 
            (pauses the simulation; has the same effect as Enabled = false).</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.UpdatesPerSecond">
            <summary>
            Specify how often the Particle System should be Updated.
            <para>NOTE: Specifying a value of zero (default) will cause the Particle 
            System to be Updated every time the Update() function is called 
            (i.e. as often as possible).</para>
            <para>NOTE: If the Update() function is not called often enough to
            keep up with this specified Update rate, the Update function
            updates the Particle Systems as often as possible.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.PerformanceProfilingIsEnabled">
            <summary>
            Get / Set if performance timings should be measured or not, such as how long it takes to perform updates and draws.
            <para>This should be disabled before building a release version of your application.</para>
            <para>Note: Performance profiling is not available on the Reach profile, so this will always return False on the Reach profile.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.PerformanceTimeToDoUpdateInMilliseconds">
            <summary>
            Get how long (in milliseconds) it took to perform the last Update() function call.
            <para>Returns 0 if Performance Profiling is not Enabled.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.PerformanceTimeToDoDrawInMilliseconds">
            <summary>
            Get how long (in milliseconds) it took to perform the last Draw() function call.
            <para>Returns 0 if Performance Profiling is not Enabled.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ParticleSystemManagerToCopyPropertiesFrom">
            <summary>
            The Particle System Manager whose properties (SimulationSpeed and 
            UpdatesPerSecond) this particle system should follow.  If null is not specified,
            the Manager's properties will be copied into this particle system immediately.
            <para>NOTE: This Particle System's properties will only clone the Manager's properties
            if the Manager's properties are Enabled. For example, the Manager's SimulationSpeed
            will only be copied to this Particle System if the Manager's SimulationSpeedIsEnabled
            property is true.</para>
            <para>NOTE: This value is automatically set to the last Particle System Manager the 
            Particle System is added to.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ParticleType">
            <summary>
            Get the type of Particles that this Particle System should draw.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.NumberOfParticlesAllocatedInMemory">
            <summary>
            Get / Set the absolute Number of Particles to Allocate Memory for.
            <para>NOTE: This value must be greater than or equal to zero.</para>
            <para>NOTE: Even if this many particles aren't used, the space for this many Particles 
            is still allocated in memory.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.MaxNumberOfParticlesAllowed">
            <summary>
            Get / Set the Max Number of Particles this Particle System is Allowed to contain at any given time.
            <para>NOTE: The Automatic Memory Manager will never allocate space for more Particles than this.</para>
            <para>NOTE: This value must be greater than or equal to zero.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.NumberOfActiveParticles">
            <summary>
            Get the number of Particles that are currently Active
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.NumberOfParticlesBeingDrawn">
            <summary>
            Get the number of Particles being Drawn. That is, how many Particles 
            are both Active AND Visible.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.NumberOfParticlesStillPossibleToAdd">
            <summary>
            Get the number of Particles that may still be added before reaching the
            Max Number Of Particles Allowed. If the Max Number Of Particles Allowed is 
            greater than the Number Of Particles Allocated In Memory AND the Auto Memory Manager is
            set to not increase the amount of Allocated Memory, than this returns the number 
            of Particles that may still be added before running out of Memory.
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.ActiveParticles">
            <summary>
            Get / Protected Set a Linked List whose Nodes point to the Active Particles.
            <para>NOTE: The Protected Set option is only provided to allow the order of the 
            LinkedListNodes to be changed, changing the update and drawing 
            order of the Particles. Be sure that all of the original LinkedListNodes 
            (and only the original LinkedListNodes, no more) obtained from the 
            Get are included; they may only be rearranged. If they are not, 
            there may (and probably will) be unexpected results.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.InactiveParticles">
            <summary>
            Returns a Linked List whose Nodes point to the Inactive Particles
            </summary>
        </member>
        <member name="P:DPSF.DPSF`2.Particles">
            <summary>
            Returns the array of all Particle objects
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.UpdateParticleSystemDelegate">
            <summary>
            The function prototype that Particle System Events must follow
            </summary>
            <param name="fElapsedTimeInSeconds">How much time in seconds has elapsed since the last update</param>
        </member>
        <member name="T:DPSF.DPSF`2.UpdateParticleDelegate">
            <summary>
            The function prototype that the Particle Events must follow
            </summary>
            <param name="cParticle">The Particle to be updated</param>
            <param name="fElapsedTimeInSeconds">How much time in seconds has elapsed since the last update</param>
        </member>
        <member name="T:DPSF.DPSF`2.InitializeParticleDelegate">
            <summary>
            The function prototype that the Particle Initialization Functions must follow
            </summary>
            <param name="cParticle">The Particle to be initialized</param>
        </member>
        <member name="T:DPSF.DPSF`2.UpdateVertexDelegate">
            <summary>
            The function prototype that the Vertex Update Functions must follow
            </summary>
            <param name="sParticleVertexBuffer">The vertex buffer array</param>
            <param name="iIndexInVertexBuffer">The index in the vertex buffer that the Particle properties should be written to</param>
            <param name="cParticle">The Particle whose properties should be copied to the vertex buffer</param>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleEvents">
            <summary>
            Class to hold all of the Particle Events
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Adds a new EveryTime Event with a default Execution Order and Group of zero. 
            EveryTime Events fire every frame (i.e. every time the Update() function is called).
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32)">
            <summary>
            Adds a new EveryTime Event with a default Group of zero. 
            EveryTime Events fire every frame (i.e. every time the Update() function is called).
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute. 
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in the 
            order they are added.</para></param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Adds a new EveryTime Event. 
            EveryTime Events fire every frame (i.e. every time the Update() function is called).
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in the 
            order they are added.</para></param>
            <param name="iGroup">The Group that this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveEveryTimeEvents(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Removes all EveryTime Events with the specified Function.
            Returns the number of Events that were removed.
            </summary>
            <param name="cFunction">The Function of the EveryTime Event to remove</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveEveryTimeEvents(System.Int32)">
            <summary>
            Removes all EveryTime Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove the EveryTime Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Removes an EveryTime Event with the specified Function, Execution Order, and Group.
            Returns true if the Event was found and removed, false if not.
            </summary>
            <param name="cFunction">The Function of the EveryTime Event to remove</param>
            <param name="iExecutionOrder">The Execution Order of the Event to remove. Default is zero.</param>
            <param name="iGroup">The Group that the Event to remove is in. Default is zero.</param>
            <returns>Returns true if the Event was found and removed, false if not.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveAllEveryTimeEvents">
            <summary>
            Removes all EveryTime Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.ContainsEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Returns if there is an EveryTime Event with the specified Function or not.
            </summary>
            <param name="cFunction">The Function of the EveryTime Event to look for</param>
            <returns>Returns true if an Event with the specified Function was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.ContainsEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Returns if there is an EveryTime Event with the specifed Function, Execution Order, and Group or not.
            </summary>
            <param name="cFunction">The Function of the EveryTime Event to look for</param>
            <param name="iExecutionOrder">The Execution Order of the Event to look for</param>
            <param name="iGroup">The Group of the Event to look for</param>
            <returns>Returns true if an Event with the specified Function, Execution Order, and Group was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Adds a new OneTime Event with a default Execution Order and Group of zero. 
            OneTime Events fire once then are automatically removed.
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32)">
            <summary>
            Adds a new OneTime Event with a default Group of zero. 
            OneTime Events fire once then are automatically removed.
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in the 
            order they are added.</para></param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Adds a new OneTime Event. 
            OneTime Events fire once then are automatically removed.
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in the 
            order they are added.</para></param>
            <param name="iGroup">The Group that this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveOneTimeEvents(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Removes all OneTime Events with the specified Function.
            Returns the number of Events that were removed.
            </summary>
            <param name="cFunction">The Function of the OneTime Event to remove</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveOneTimeEvents(System.Int32)">
            <summary>
            Removes all OneTime Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove the OneTime Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Removes a OneTime Event with the specified Function To Call, Execution Order, and Group.
            Returns true if the Event was found and removed, false if not.
            </summary>
            <param name="cFunction">The Function of the OneTime Event to remove</param>
            <param name="iExecutionOrder">The Execution Order of the Event to remove. Default is zero.</param>
            <param name="iGroup">The Group that the Event to remove is in. Default is zero.</param>
            <returns>Returns true if the Event was found and removed, false if not.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveAllOneTimeEvents">
            <summary>
            Removes all OneTime Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.ContainsOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Returns if there is an OneTime Event with the specified Function or not.
            </summary>
            <param name="cFunction">The Function of the OneTime Event to look for</param>
            <returns>Returns true if an Event with the specified Function was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.ContainsOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Returns if there is an OneTime Event with the specifed Function, Execution Order, and Group or not.
            </summary>
            <param name="cFunction">The Function of the OneTime Event to look for</param>
            <param name="iExecutionOrder">The Execution Order of the Event to look for</param>
            <param name="iGroup">The Group of the Event to look for</param>
            <returns>Returns true if an Event with the specified Function, Execution Order, and Group was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Adds a new Timed Event with a default Execution Order and Group of zero. 
            Timed Events fire when the Particle's Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fTimeToFire">The Time when the Event should fire
            (i.e. when the Function should be called)</param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32)">
            <summary>
            Adds a new Timed Event with a default Group of zero. 
            Timed Events fire when the Particle's Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fTimeToFire">The Time when the Event should fire
            (i.e. when the Function should be called)</param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute. 
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in the 
            order they are added.</para></param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Adds a new Timed Event. 
            Timed Events fire when the Particle's Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fTimeToFire">The Time when the Event should fire
            (i.e. when the Function should be called)</param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in the 
            order they are added.</para></param>
            <param name="iGroup">The Group that this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveTimedEvents(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Removes all Timed Events with the specified Function.
            Returns the number of Events that were removed.
            </summary>
            <param name="cFunction">The Function that is called when the Event fires</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveTimedEvents(System.Int32)">
            <summary>
            Removes all Timed Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove the Timed Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Removes a Timed Event with the specified Function, Time To Fire, Execution Order, and Group.
            Returns true if the Event was found and removed, false if not.
            </summary>
            <param name="fTimeToFire">The Time the Event is scheduled to fire at</param>
            <param name="cFunction">The Function that is called when the Event fires</param>
            <param name="iExecutionOrder">The Execution Order of the Event to remove. Default is zero.</param>
            <param name="iGroup">The Group that the Event to remove is in. Default is zero.</param>
            <returns>Returns true if the Event was found and removed, false if not.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveAllTimedEvents">
            <summary>
            Removes all Timed Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.ContainsTimedEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Returns if there is a Timed Event with the specified Function or not.
            </summary>
            <param name="cFunction">The Function of the Timed Event to look for</param>
            <returns>Returns true if an Event with the specified Function was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.ContainsTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Returns if there is a Timed Event with the specifed Timed To Fire, Function, Execution Order, and Group or not.
            </summary>
            <param name="fTimeToFire">The Time the Event is scheduled to fire at</param>
            <param name="cFunction">The Function of the Timed Event to look for</param>
            <param name="iExecutionOrder">The Execution Order of the Event to look for</param>
            <param name="iGroup">The Group of the Event to look for</param>
            <returns>Returns true if an Event with the specified Function, Execution Order, and Group was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Adds a new Normalized Timed Event with a default Execution Order and Group of zero. 
            Normalized Timed Events fire when the Particle's Normalized Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) when the Event should fire. 
            <para>NOTE: This is clamped to the range of 0.0 - 1.0.</para></param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32)">
            <summary>
            Adds a new Normalized Timed Event with a default Group of zero. 
            Normalized Timed Events fire when the Particle's Normalized Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) when the Event should fire. 
            <para>NOTE: This is clamped to the range of 0.0 - 1.0.</para></param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute. NOTE: Events with lower Execution Order are executed first. NOTE: Events
            with the same Execution Order are not guaranteed to be executed in the order they are added.</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.AddNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Adds a new Normalized Timed Event. 
            Normalized Timed Events fire when the Particle's Normalized Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) when the Event should fire
            (compared against the Particle's Normalized Elapsed Time). NOTE: This is clamped to the range of 0.0 - 1.0</param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in the 
            order they are added.</para></param>
            <param name="iGroup">The Group that this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveNormalizedTimedEvents(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Removes all Normalized Timed Events with the specified Function.
            Returns the number of Events that were removed.
            </summary>
            <param name="cFunction">The Function that is called when the Event fires</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveNormalizedTimedEvents(System.Int32)">
            <summary>
            Removes all Normalized Timed Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove the Normalized Timed Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Removes a Normalized Timed Event with the specified Function, Time To Fire, Execution Order, and Group.
            Returns true if the Event was found and removed, false if not.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) the Event is scheduled to fire at</param>
            <param name="cFunction">The Function that is called when the Event fires</param>
            <param name="iExectionOrder">The Execution Order of the Event to remove. Default is zero.</param>
            <param name="iGroup">The Group that the Event to remove is in. Default is zero.</param>
            <returns>Returns true if the Event was found and removed, false if not.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveAllNormalizedTimedEvents">
            <summary>
            Removes all Normalized Timed Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.ContainsNormalizedTimedEvent(DPSF.DPSF{`0,`1}.UpdateParticleDelegate)">
            <summary>
            Returns if there is a NormalizedTimed Event with the specified Function or not.
            </summary>
            <param name="cFunction">The Function of the NormalizedTimed Event to look for</param>
            <returns>Returns true if an Event with the specified Function was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.ContainsNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleDelegate,System.Int32,System.Int32)">
            <summary>
            Returns if there is a NormalizedTimed Event with the specifed Normalized Time To Fire, Function, Execution Order, and Group or not.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) the Event is scheduled to fire at</param>
            <param name="cFunction">The Function of the NormalizedTimed Event to look for</param>
            <param name="iExecutionOrder">The Execution Order of the Event to look for</param>
            <param name="iGroup">The Group of the Event to look for</param>
            <returns>Returns true if an Event with the specified Function, Execution Order, and Group was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveAllTimedAndNormalizedTimedEvents">
            <summary>
            Removes all Timed Events and Normalized Timed Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveAllEvents">
            <summary>
            Removes all Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.RemoveAllEventsInGroup(System.Int32)">
            <summary>
            Removes all Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove all Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.Update(`0,System.Single)">
            <summary>
            Updates the given Particle according to the Particle Events. This is called automatically
            every frame by the Particle System.
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">The amount of Time Elapsed since the last Update</param>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleEvents.EParticleEventTypes">
            <summary>
            The Particle Event Types
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleEvents.CParticleEvent">
            <summary>
            Class to hold a Particle Event's information
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CParticleEvent.#ctor(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,DPSF.DPSF{`0,`1}.CParticleEvents.EParticleEventTypes,System.Int32,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="_cFunctionToCall">The Function the Event should call when it Fires</param>
            <param name="_eType">The Type of Event this is</param>
            <param name="_iExecutionOrder">The Order, relative to other Events, of when this Event should be Fired</param>
            <param name="_iGroup">The Group this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CParticleEvent.op_Equality(DPSF.DPSF{`0,`1}.CParticleEvents.CParticleEvent,DPSF.DPSF{`0,`1}.CParticleEvents.CParticleEvent)">
            <summary>
            Overload the == operator to test for value equality
            </summary>
            <returns>Returns true if the structures have the same values, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CParticleEvent.op_Inequality(DPSF.DPSF{`0,`1}.CParticleEvents.CParticleEvent,DPSF.DPSF{`0,`1}.CParticleEvents.CParticleEvent)">
            <summary>
            Overload the != operator to test for value equality
            </summary>
            <returns>Returns true if the structures do not have the same values, false if they do</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CParticleEvent.Equals(System.Object)">
            <summary>
            Override the Equals method
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CParticleEvent.GetHashCode">
            <summary>
            Override the GetHashCode method
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleEvents.CTimedParticleEvent">
            <summary>
            Class to hold a Timed Particle Event's information
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CTimedParticleEvent.#ctor(DPSF.DPSF{`0,`1}.UpdateParticleDelegate,DPSF.DPSF{`0,`1}.CParticleEvents.EParticleEventTypes,System.Int32,System.Int32,System.Single)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="_cFunctionToCall">The Function the Event should call when it Fires</param>
            <param name="_eTimedType">The Type of Timed Event this is (Timed or NormalizedTimed)</param>
            <param name="_iExecutionOrder">The Order, relative to other Events, of when this Event should Fire</param>
            <param name="_iGroup">The Group this Event should belong to</param>
            <param name="_fTimeToFire">The Time at which this Event should Fire</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CTimedParticleEvent.op_Equality(DPSF.DPSF{`0,`1}.CParticleEvents.CTimedParticleEvent,DPSF.DPSF{`0,`1}.CParticleEvents.CTimedParticleEvent)">
            <summary>
            Overload the == operator to test for value equality
            </summary>
            <returns>Returns true if the structures have the same values, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CTimedParticleEvent.op_Inequality(DPSF.DPSF{`0,`1}.CParticleEvents.CTimedParticleEvent,DPSF.DPSF{`0,`1}.CParticleEvents.CTimedParticleEvent)">
            <summary>
            Overload the != operator to test for value equality
            </summary>
            <returns>Returns true if the structures do not have the same values, false if they do</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CTimedParticleEvent.Equals(System.Object)">
            <summary>
            Override the Equals method
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleEvents.CTimedParticleEvent.GetHashCode">
            <summary>
            Override the GetHashCode method
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleSystemEvents">
            <summary>
            Class to hold all of the Particle System Events and related info
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Adds a new EveryTime Event with a default Execution Order and Group of zero. 
            EveryTime Events fire every frame (i.e. every time the Update() function is called).
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32)">
            <summary>
            Adds a new EveryTime Event with a default Group of zero. 
            EveryTime Events fire every frame (i.e. every time the Update() function is called).
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in 
            the order they are added.</para></param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Adds a new EveryTime Event. 
            EveryTime Events fire every frame (i.e. every time the Update() function is called).
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in 
            the order they are added.</para></param>
            <param name="iGroup">The Group that this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveEveryTimeEvents(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Removes all EveryTime Events with the specified Function.
            Returns the number of Events that were removed.
            </summary>
            <param name="cFunction">The Function of the EveryTime Event to remove</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveEveryTimeEvents(System.Int32)">
            <summary>
            Removes all EveryTime Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove the EveryTime Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Removes an EveryTime Event with the specified Function, Execution Order, and Group.
            Returns true if the Event was found and removed, false if not.
            </summary>
            <param name="cFunction">The Function of the EveryTime Event to remove</param>
            <param name="iExecutionOrder">The Execution Order of the Event to remove. Default is zero.</param>
            <param name="iGroup">The Group that the Event to remove is in. Default is zero.</param>
            <returns>Returns true if the Event was found and removed, false if not.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveAllEveryTimeEvents">
            <summary>
            Removes all EveryTime Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.ContainsEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Returns if there is an EveryTime Event with the specified Function or not.
            </summary>
            <param name="cFunction">The Function of the EveryTime Event to look for</param>
            <returns>Returns true if an Event with the specified Function was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.ContainsEveryTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Returns if there is an EveryTime Event with the specifed Function, Execution Order, and Group or not.
            </summary>
            <param name="cFunction">The Function of the EveryTime Event to look for</param>
            <param name="iExecutionOrder">The Execution Order of the Event to look for</param>
            <param name="iGroup">The Group of the Event to look for</param>
            <returns>Returns true if an Event with the specified Function, Execution Order, and Group was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Adds a new OneTime Event with a default Execution Order and Group of zero. 
            OneTime Events fire once then are automatically removed.
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32)">
            <summary>
            Adds a new OneTime Event with a default Group of zero. 
            OneTime Events fire once then are automatically removed.
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in 
            the order they are added.</para></param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Adds a new OneTime Event. 
            OneTime Events fire once then are automatically removed.
            </summary>
            <param name="cFunctionToCall">The Function to Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in 
            the order they are added.</para></param>
            <param name="iGroup">The Group that this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveOneTimeEvents(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Removes all OneTime Events with the specified Function.
            Returns the number of Events that were removed.
            </summary>
            <param name="cFunction">The Function of the OneTime Event to remove</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveOneTimeEvents(System.Int32)">
            <summary>
            Removes all OneTime Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove the OneTime Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Removes a OneTime Event with the specified Function To Call, Execution Order, and Group.
            Returns true if the Event was found and removed, false if not.
            </summary>
            <param name="cFunction">The Function of the OneTime Event to remove</param>
            <param name="iExecutionOrder">The Execution Order of the Event to remove. Default is zero.</param>
            <param name="iGroup">The Group that the Event to remove is in. Default is zero.</param>
            <returns>Returns true if the Event was found and removed, false if not.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveAllOneTimeEvents">
            <summary>
            Removes all OneTime Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.ContainsOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Returns if there is an OneTime Event with the specified Function or not.
            </summary>
            <param name="cFunction">The Function of the OneTime Event to look for</param>
            <returns>Returns true if an Event with the specified Function was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.ContainsOneTimeEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Returns if there is an OneTime Event with the specifed Function, Execution Order, and Group or not.
            </summary>
            <param name="cFunction">The Function of the OneTime Event to look for</param>
            <param name="iExecutionOrder">The Execution Order of the Event to look for</param>
            <param name="iGroup">The Group of the Event to look for</param>
            <returns>Returns true if an Event with the specified Function, Execution Order, and Group was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Adds a new Timed Event with a default Execution Order and Group of zero. 
            Timed Events fire when the Particle's Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fTimeToFire">The Time when the Event should fire
            (i.e. when the Function should be called)</param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32)">
            <summary>
            Adds a new Timed Event with a default Group of zero. 
            Timed Events fire when the Particle's Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fTimeToFire">The Time when the Event should fire
            (i.e. when the Function should be called)</param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in 
            the order they are added.</para></param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Adds a new Timed Event. 
            Timed Events fire when the Particle's Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fTimeToFire">The Time when the Event should fire
            (i.e. when the Function should be called)</param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute.
            <para>NOTE: Events with lower Execution Order are executed first.</para>
            <para>NOTE: Events with the same Execution Order are not guaranteed to be executed in 
            the order they are added.</para></param>
            <param name="iGroup">The Group that this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveTimedEvents(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Removes all Timed Events with the specified Function.
            Returns the number of Events that were removed.
            </summary>
            <param name="cFunction">The Function that is called when the Event fires</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveTimedEvents(System.Int32)">
            <summary>
            Removes all Timed Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove the Timed Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Removes a Timed Event with the specified Function, Time To Fire, Execution Order, and Group.
            Returns true if the Event was found and removed, false if not.
            </summary>
            <param name="fTimeToFire">The Time the Event is scheduled to fire at</param>
            <param name="cFunction">The Function that is called when the Event fires</param>
            <param name="iExecutionOrder">The Execution Order of the Event to remove. Default is zero.</param>
            <param name="iGroup">The Group that the Event to remove is in. Default is zero.</param>
            <returns>Returns true if the Event was found and removed, false if not.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveAllTimedEvents">
            <summary>
            Removes all Timed Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.ContainsTimedEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Returns if there is a Timed Event with the specified Function or not.
            </summary>
            <param name="cFunction">The Function of the Timed Event to look for</param>
            <returns>Returns true if an Event with the specified Function was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.ContainsTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Returns if there is a Timed Event with the specifed Timed To Fire, Function, Execution Order, and Group or not.
            </summary>
            <param name="fTimeToFire">The Time the Event is scheduled to fire at</param>
            <param name="cFunction">The Function of the Timed Event to look for</param>
            <param name="iExecutionOrder">The Execution Order of the Event to look for</param>
            <param name="iGroup">The Group of the Event to look for</param>
            <returns>Returns true if an Event with the specified Function, Execution Order, and Group was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Adds a new Normalized Timed Event with a default Execution Order and Group of zero. 
            Normalized Timed Events fire when the Particle's Normalized Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) when the Event should fire. 
            <para>NOTE: This is clamped to the range of 0.0 - 1.0.</para></param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.AddNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32)">
            <summary>
            Adds a new Normalized Timed Event with a default Group of zero. 
            Normalized Timed Events fire when the Particle's Normalized Elapsed Time reaches the specified Time To Fire.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) when the Event should fire. 
            <para>NOTE: This is clamped to the range of 0.0 - 1.0.</para></param>
            <param name="cFunctionToCall">The Function To Call when the Event fires</param>
            <param name="iExecutionOrder">The Order, relative to other Events, of when this Event 
            should Execute. NOTE: Events with lower Execution Order are executed first. NOTE: Events
            with the same Execution Order are not guaranteed to be executed in the order they are added.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DPSF.DPSF`2.CParticleSystemEvents.AddNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)" -->
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveNormalizedTimedEvents(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Removes all Normalized Timed Events with the specified Function.
            Returns the number of Events that were removed.
            </summary>
            <param name="cFunction">The Function that is called when the Event fires</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveNormalizedTimedEvents(System.Int32)">
            <summary>
            Removes all Normalized Timed Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove the Normalized Timed Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Removes a Normalized Timed Event with the specified Function, Time To Fire, Execution Order, and Group.
            Returns true if the Event was found and removed, false if not.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) the Event is scheduled to fire at</param>
            <param name="cFunction">The Function that is called when the Event fires</param>
            <param name="iExectionOrder">The Execution Order of the Event to remove. Default is zero.</param>
            <param name="iGroup">The Group that the Event to remove is in. Default is zero.</param>
            <returns>Returns true if the Event was found and removed, false if not.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveAllNormalizedTimedEvents">
            <summary>
            Removes all Normalized Timed Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.ContainsNormalizedTimedEvent(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate)">
            <summary>
            Returns if there is a NormalizedTimed Event with the specified Function or not.
            </summary>
            <param name="cFunction">The Function of the NormalizedTimed Event to look for</param>
            <returns>Returns true if an Event with the specified Function was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.ContainsNormalizedTimedEvent(System.Single,DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,System.Int32,System.Int32)">
            <summary>
            Returns if there is a NormalizedTimed Event with the specifed Normalized Time To Fire, Function, Execution Order, and Group or not.
            </summary>
            <param name="fNormalizedTimeToFire">The Normalized Time (0.0 - 1.0) the Event is scheduled to fire at</param>
            <param name="cFunction">The Function of the NormalizedTimed Event to look for</param>
            <param name="iExecutionOrder">The Execution Order of the Event to look for</param>
            <param name="iGroup">The Group of the Event to look for</param>
            <returns>Returns true if an Event with the specified Function, Execution Order, and Group was found, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveAllTimedAndNormalizedTimedEvents">
            <summary>
            Removes all Timed Events and Normalized Timed Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveAllEvents">
            <summary>
            Removes all Events.
            Returns the number of Events that were removed.
            </summary>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.RemoveAllEventsInGroup(System.Int32)">
            <summary>
            Removes all Events in the specified Group.
            Returns the number of Events that were removed.
            </summary>
            <param name="iGroup">The Group to remove all Events from</param>
            <returns>Returns the number of Events that were removed.</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.Update(System.Single)">
            <summary>
            Updates the Particle System according to the Particle System Events. This is done automatically
            by the Particle System every frame (i.e. Everytime the Update() function is called).
            </summary>
            <param name="fElapsedTimeInSeconds">How much Time has passed, in seconds, 
            since the last Update</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.Update(System.Single,System.Single)">
            <summary>
            Updates the Particle System according to the Particle System Events
            </summary>
            <param name="fElapsedTimeThisPass">The amount of Elapsed Time to pass
            into the Event Functions being called on this Pass</param>
            <param name="fTotalElapsedTimeThisFrame">How much Time has passed, in seconds, 
            since the last Frame</param>
        </member>
        <member name="P:DPSF.DPSF`2.CParticleSystemEvents.LifetimeData">
            <summary>
            Get / Set the Lifetime information of the Particle System
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleSystemEvents.EParticleSystemEventTypes">
            <summary>
            The Particle System Event Types
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemEvent">
            <summary>
            Class to hold a Particle System Event's information
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemEvent.#ctor(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,DPSF.DPSF{`0,`1}.CParticleSystemEvents.EParticleSystemEventTypes,System.Int32,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="_cFunctionToCall">The Function the Event should call when it Fires</param>
            <param name="_eType">The Type of Event this is</param>
            <param name="_iExecutionOrder">The Order, relative to other Events, of when this Event should be Fired</param>
            <param name="_iGroup">The Group this Event should belong to</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemEvent.op_Equality(DPSF.DPSF{`0,`1}.CParticleSystemEvents.CParticleSystemEvent,DPSF.DPSF{`0,`1}.CParticleSystemEvents.CParticleSystemEvent)">
            <summary>
            Overload the == operator to test for value equality
            </summary>
            <returns>Returns true if the structures have the same values, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemEvent.op_Inequality(DPSF.DPSF{`0,`1}.CParticleSystemEvents.CParticleSystemEvent,DPSF.DPSF{`0,`1}.CParticleSystemEvents.CParticleSystemEvent)">
            <summary>
            Overload the != operator to test for value equality
            </summary>
            <returns>Returns true if the structures do not have the same values, false if they do</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemEvent.Equals(System.Object)">
            <summary>
            Override the Equals method
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemEvent.GetHashCode">
            <summary>
            Override the GetHashCode method
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleSystemEvents.CTimedParticleSystemEvent">
            <summary>
            Class to hold a Timed Particle System Event's information
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CTimedParticleSystemEvent.#ctor(DPSF.DPSF{`0,`1}.UpdateParticleSystemDelegate,DPSF.DPSF{`0,`1}.CParticleSystemEvents.EParticleSystemEventTypes,System.Int32,System.Int32,System.Single)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="_cFunctionToCall">The Function the Event should call when it Fires</param>
            <param name="_eTimedType">The Type of Timed Event this is (Timed or NormalizedTimed)</param>
            <param name="_iExecutionOrder">The Order, relative to other Events, of when this Event should Fire</param>
            <param name="_iGroup">The Group this Event should belong to</param>
            <param name="_fTimeToFire">The Time at which this Event should Fire</param>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CTimedParticleSystemEvent.op_Equality(DPSF.DPSF{`0,`1}.CParticleSystemEvents.CTimedParticleSystemEvent,DPSF.DPSF{`0,`1}.CParticleSystemEvents.CTimedParticleSystemEvent)">
            <summary>
            Overload the == operator to test for value equality
            </summary>
            <returns>Returns true if the structures have the same values, false if not</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CTimedParticleSystemEvent.op_Inequality(DPSF.DPSF{`0,`1}.CParticleSystemEvents.CTimedParticleSystemEvent,DPSF.DPSF{`0,`1}.CParticleSystemEvents.CTimedParticleSystemEvent)">
            <summary>
            Overload the != operator to test for value equality
            </summary>
            <returns>Returns true if the structures do not have the same values, false if they do</returns>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CTimedParticleSystemEvent.Equals(System.Object)">
            <summary>
            Override the Equals method
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CTimedParticleSystemEvent.GetHashCode">
            <summary>
            Override the GetHashCode method
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleSystemEvents.EParticleSystemEndOfLifeOptions">
            <summary>
            The Options of what should happen when the Particle System reaches the end of its Lifetime
            </summary>
        </member>
        <member name="F:DPSF.DPSF`2.CParticleSystemEvents.EParticleSystemEndOfLifeOptions.Nothing">
            <summary>
            When the Particle System reaches the end of its Lifetime nothing special happens; It just
            continues to operate as normal.
            </summary>
        </member>
        <member name="F:DPSF.DPSF`2.CParticleSystemEvents.EParticleSystemEndOfLifeOptions.Repeat">
            <summary>
            When the Particle System reaches the end of its Lifetime its Elapsed Time is reset to zero,
            so that all of the Timed Events will be repeated again.
            </summary>
        </member>
        <member name="F:DPSF.DPSF`2.CParticleSystemEvents.EParticleSystemEndOfLifeOptions.Destroy">
            <summary>
            When the Particle System reaches the end of its Lifetime it calls its Destroy() function, so
            the Particle System releases all its resources and is no longer updated or drawn.
            </summary>
        </member>
        <member name="T:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemLifetimeData">
            <summary>
            Class to hold the Lifetime information of the Particle System
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemLifetimeData.Reset">
            <summary>
            Resets the class variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemLifetimeData.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy the ParticleToCopy's values into this Particle
            </summary>
            <param name="ParticleToCopy">The Particle whose values should be Copied</param>
        </member>
        <member name="P:DPSF.DPSF`2.CParticleSystemEvents.CParticleSystemLifetimeData.EndOfLifeOption">
            <summary>
            Get / Set what should happen when the Particle System reaches the end of its Lifetime
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticleSystem`2.MagnetList">
            <summary>
            A list of Magnets that should affect this Particle System's Particles.
            <para>NOTE: You must add a UpdateParticleXAccordingToMagnets function to the Particle
            Events in order for these Magnets to affect the Particles.</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.InitializeParticleUsingInitialProperties(DPSF.DPSFParticle)">
            <summary>
            Function to Initialize a Default Particle with the Initial Settings
            </summary>
            <param name="Particle">The Particle to be Initialized</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.InitializeParticleUsingInitialProperties(DPSF.DPSFParticle,DPSF.DPSFDefaultBaseParticleSystem{`0,`1}.CInitialProperties)">
            <summary>
            Function to Initialize a Default Particle with the Initial Settings
            </summary>
            <param name="Particle">The Particle to be Initialized</param>
            <param name="cInitialProperties">The Initial Settings to use to Initialize the Particle</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticlePositionUsingVelocity(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Update a Particle's Position according to its Velocity
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleVelocityUsingAcceleration(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Update a Particle's Velocity according to its Acceleration
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticlePositionAndVelocityUsingAcceleration(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Updates a Particle's Velocity according to its Acceleration, and then the Position according
            to the new Velocity
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticlePositionUsingExternalForce(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Applies the External Force to the Particle's Position
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleVelocityUsingExternalForce(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Applies the External Force to the Particle's Velocity
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleVelocityUsingFriction(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Applies the Particle's Friction to the its Velocity to slow the Particle down to a stop
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleColorUsingLerp(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Linearly interpolates the Particles Color between it's Start Color and End Color based on the 
            Particle's Normalized Elapsed Time.
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleTransparencyToFadeOutUsingLerp(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Linearly interpolates the Particles Transparency to fade out based on the Particle's Normalized Elapsed Time.
            <para>If you are also updating the Particle Color using an EveryTime Event, be sure to set the ExecutionOrder of the 
            event calling this function to be greater than that one, so that this function is called AFTER the color update function.</para>
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleTransparencyToFadeInUsingLerp(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Linearly interpolates the Particles Transparency to fade in based on the Particle's Normalized Elapsed Time.
            <para>If you are also updating the Particle Color using an EveryTime Event, be sure to set the ExecutionOrder of the 
            event calling this function to be greater than that one, so that this function is called AFTER the color update function.</para>
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleTransparencyWithQuickFadeInAndSlowFadeOut(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Quickly fades particle in when born and slowly fades it out as it gets closer to death.
            <para>If you are also updating the Particle Color using an EveryTime Event, be sure to set the ExecutionOrder of the 
            event calling this function to be greater than that one, so that this function is called AFTER the color update function.</para>
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleTransparencyWithQuickFadeInAndQuickFadeOut(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Quickly fades particle in when born and quickly fades it out as it approaches its death.
            <para>If you are also updating the Particle Color using an EveryTime Event, be sure to set the ExecutionOrder of the 
            event calling this function to be greater than that one, so that this function is called AFTER the color update function.</para>
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticlePositionAccordingToMagnets(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Calculates how much affect each of the Particle System's Magnets should have on 
            this Particle and updates the Particle's Position accordingly.
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleVelocityAccordingToMagnets(DPSF.DPSFDefaultBaseParticle,System.Single)">
            <summary>
            Calculates how much affect each of the Particle System's Magnets should have on 
            this Particle and updates the Particle's Velocity accordingly.
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.CalculateForceMagnetShouldExertOnParticle(DPSF.DefaultParticleSystemMagnet,DPSF.DPSFDefaultBaseParticle)">
            <summary>
            Returns the vector force that a Magnet should exert on a Particle
            </summary>
            <param name="cMagnet">The Magnet affecting the Particle</param>
            <param name="cParticle">The Particle being affected by the Magnet</param>
            <returns>Returns the vector force that a Magnet should exert on a Particle</returns>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleSystemEmitParticlesAutomaticallyOn(System.Single)">
            <summary>
            Sets the Emitter to Emit Particles Automatically
            </summary>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleSystemEmitParticlesAutomaticallyOff(System.Single)">
            <summary>
            Sets the Emitter to not Emit Particles Automatically
            </summary>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleSystemEnableEmitter(System.Single)">
            <summary>
            Enables the Emitter
            </summary>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultBaseParticleSystem`2.UpdateParticleSystemDisableEmitter(System.Single)">
            <summary>
            Disables the Emitter
            </summary>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="P:DPSF.DPSFDefaultBaseParticleSystem`2.InitialProperties">
            <summary>
            Get the Settings used to specify the Initial Properties of a new Particle.
            <para>NOTE: These are only applied to the Particle when the InitializeParticleUsingInitialProperties()
            function is set as the Particle Initialization Function.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultBaseParticleSystem`2.Name">
            <summary>
            The Name of the Particle System
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultBaseParticleSystem`2.CInitialProperties">
            <summary>
            Particle System Properties used to initialize a Particle's Properties.
            <para>NOTE: These are only applied to the Particle when the InitializeParticleUsingInitialProperties()
            function is set as the Particle Initialization Function.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticleSystem`2.CInitialProperties.InterpolateBetweenMinAndMaxPosition">
            <summary>
            If true the Position will be somewhere on the vector joining the Min Position to the Max Position.
            <para>If false each of the XYZ components will be randomly calculated individually between the Min and Max Position XYZ values.</para>
            <para>Default value is false.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticleSystem`2.CInitialProperties.InterpolateBetweenMinAndMaxVelocity">
            <summary>
            If true the Velocity will be somewhere on the vector joining the Min Velocity to the Max Velocity.
            <para>If false each of the XYZ components will be randomly calculated individually between the Min and Max Velocity XYZ values.</para>
            <para>Default value is false.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticleSystem`2.CInitialProperties.InterpolateBetweenMinAndMaxAcceleration">
            <summary>
            If true the Acceleration will be somewhere on the vector joining the Min Acceleration to the Max Acceleration.
            <para>If false each of the XYZ components will be randomly calculated individually between the Min and Max Acceleration XYZ values.</para>
            <para>Default value is false.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticleSystem`2.CInitialProperties.InterpolateBetweenMinAndMaxExternalForce">
            <summary>
            If true the External Force will be somewhere on the vector joining the Min External Force to the Max External Force.
            <para>If false each of the XYZ components will be randomly calculated individually between the Min and Max External Force XYZ values.</para>
            <para>Default value is false.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticleSystem`2.CInitialProperties.InterpolateBetweenMinAndMaxColors">
            <summary>
            If true a Lerp'd value between the Min and Max Colors will be randomly chosen.
            <para>If false the RGBA component values will be randomly chosen individually between the Min and Max Color RGBA values.</para>
            <para>Default value is false.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticleSystem`2.CInitialProperties.PositionIsAffectedByEmittersPosition">
            <summary>
            If true the Emitter's Position will be added to the Particle's starting Position. For example, if the Particle is given
            an initial position of zero it will be placed wherever the Emitter currently is.
            <para>Default value is true.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultBaseParticleSystem`2.CInitialProperties.VelocityIsAffectedByEmittersOrientation">
            <summary>
            If true the Particle's Velocity direction will be adjusted according to the Emitter's Orientation. For example, if the
            Emitter is orientated to face backwards, the Particle's Velocity direction will be reversed.
            <para>Default value is true.</para>
            </summary>
        </member>
        <member name="T:DPSF.DefaultSprite3DBillboardParticleSystem">
            <summary>
            The Default Sprite 3D Billboard Particle System to inherit from, which uses Default Sprite 3D Billboard Particles
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2">
            <summary>
            The Default Sprite 3D Billboard Particle System class.
            This class just inherits from the Default Sprite Particle System class and overrides the DrawSprite()
            function to draw the sprites as Billboards in 3D space.
            </summary>
            <typeparam name="Particle">The Particle class to use.</typeparam>
            <typeparam name="Vertex">The Vertex Format to use.</typeparam>
        </member>
        <member name="T:DPSF.DPSFDefaultSpriteParticleSystem`2">
            <summary>
            The Default Sprite Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.DrawSprite(DPSF.DPSFParticle,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Function to draw a Sprite Particle. This function should be used to draw the given
            Particle with the provided SpriteBatch.
            </summary>
            <param name="Particle">The Particle Sprite to Draw</param>
            <param name="cSpriteBatch">The SpriteBatch to use to doing the Drawing</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.InitializeParticleUsingInitialProperties(DPSF.DPSFParticle)">
            <summary>
            Function to Initialize a Default Particle with default Properties
            </summary>
            <param name="Particle">The Particle to be Initialized</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleRotationUsingRotationalVelocity(DPSF.DefaultSpriteParticle,System.Single)">
            <summary>
            Update a Particle's Rotation according to its Rotational Velocity
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleRotationalVelocityUsingRotationalAcceleration(DPSF.DefaultSpriteParticle,System.Single)">
            <summary>
            Update a Particle's Rotational Velocity according to its Rotational Acceleration
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleRotationAndRotationalVelocityUsingRotationalAcceleration(DPSF.DefaultSpriteParticle,System.Single)">
            <summary>
            Update a Particle's Rotation and Rotational Velocity according to its Rotational Acceleration
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleWidthUsingLerp(DPSF.DefaultSpriteParticle,System.Single)">
            <summary>
            Linearly interpolate the Particle's Width between the Start and End Width according
            to the Particle's Normalized Lifetime
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleHeightUsingLerp(DPSF.DefaultSpriteParticle,System.Single)">
            <summary>
            Linearly interpolate the Particle's Height between the Start and End Height according
            to the Particle's Normalized Lifetime
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleWidthAndHeightUsingLerp(DPSF.DefaultSpriteParticle,System.Single)">
            <summary>
            Linearly interpolate the Particle's Width and Height between the Start and End values according
            to the Particle's Normalized Lifetime
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleDepthFromBackToFrontUsingLerp(DPSF.DefaultSpriteParticle,System.Single)">
            <summary>
            Linearly interpolate the Particle's Position.Z value from 1.0 (back) to
            0.0 (front) according to the Particle's Normalized Lifetime
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleDepthFromFrontToBackUsingLerp(DPSF.DefaultSpriteParticle,System.Single)">
            <summary>
            Linearly interpolate the Particle's Position.Z value from 0.0 (front) to
            1.0 (back) according to the Particle's Normalized Lifetime
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteParticleSystem`2.UpdateParticleSystemToSortParticlesByDepth(System.Single)">
            <summary>
            Sorts the Particle System's Active Particles so that the Particles at the back
            (i.e. Position.Z = 1.0) are drawn before the Particles at the front (i.e. 
            Position.Z = 0.0).
            <para>NOTE: This operation is very expensive and should only be used when you are
            using a Shader (i.e. Effect and Technique).</para>
            <para>If you are not using a Shader and want the Particles sorted by Depth, use SpriteSortMode.BackToFront.</para>
            <para>Merge Sort is the sorting algorithm used, as it tends to be best for linked lists.
            TODO - WHILE MERGE SORT SHOULD BE USED, DUE TO TIME CONSTRAINTS A (PROBABLY) SLOWER METHOD (QUICK-SORT)
            IS BEING USED INSTEAD. THIS FUNCTION NEEDS TO BE UPDATED TO USE MERGE SORT STILL.
            THE LINKED LIST MERGE SORT ALGORITHM CAN BE FOUND AT http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html</para>
            </summary>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="P:DPSF.DPSFDefaultSpriteParticleSystem`2.InitialProperties">
            <summary>
            Get the Settings used to specify the Initial Properties of a new Particle.
            <para>NOTE: These are only applied to the Particle when the InitializeParticleUsingInitialProperties()
            function is set as the Particle Initialization Function.</para>
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultSpriteParticleSystem`2.CInitialPropertiesForSprite">
            <summary>
            Particle System Properties used to initialize a Particle's Properties.
            <para>NOTE: These are only applied to the Particle when the InitializeParticleUsingInitialProperties()
            function is set as the Particle Initialization Function.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultSpriteParticleSystem`2.CInitialPropertiesForSprite.StartSizeMin">
            <summary>
            The Min Start Size for the particle's StartWidth and StartHeight properties.
            <para>NOTE: If this is greater than zero, this will be used instead of 
            the StartWidthMin and StartHeightMin properties.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultSpriteParticleSystem`2.CInitialPropertiesForSprite.StartSizeMax">
            <summary>
            The Max Start Size for the particle's StartWidth and StartHeight properties.
            <para>NOTE: If this is greater than zero, this will be used instead of 
            the StartWidthMax and StartHeightMax properties.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultSpriteParticleSystem`2.CInitialPropertiesForSprite.EndSizeMin">
            <summary>
            The Min End Size for the particle's EndWidth and EndHeight properties.
            <para>NOTE: If this is greater than zero, this will be used instead of 
            the EndWidthMin and EndHeightMin properties.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultSpriteParticleSystem`2.CInitialPropertiesForSprite.EndSizeMax">
            <summary>
            The Max End Size for the particle's EndWidth and EndHeight properties.
            <para>NOTE: If this is greater than zero, this will be used instead of 
            the EndWidthMax and EndHeightMax properties.</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2.DrawSprite(DPSF.DPSFParticle,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Function to draw a Sprite Particle. This function should be used to draw the given
            Particle with the provided SpriteBatch.
            </summary>
            <param name="Particle">The Particle Sprite to Draw</param>
            <param name="cSpriteBatch">The SpriteBatch to use to doing the Drawing</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2.InitializeRenderProperties">
            <summary>
            Function to setup the Render Properties (i.e. BlendState, DepthStencilState, RasterizerState, and SamplerState)
            which will be applied to the Graphics Device before drawing the Particle System's Particles.
            <para>This function is called when initializing the particle system.</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2.SetEffectParameters">
            <summary>
            Function to set the Shader's global variables before drawing
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2.SetCameraPosition(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the camera position, so that the particles know how to make themselves face the camera if needed.
            </summary>
            <param name="cameraPosition">The camera position.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2.UpdateParticleDistanceFromCameraSquared(DPSF.DefaultSprite3DBillboardParticle,System.Single)">
            <summary>
            Updates the Particle's DistanceFromCameraSquared property to reflect how far this Particle is from the Camera.
            </summary>
            <param name="cParticle">The Particle to update.</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2.UpdateParticleSystemToSortParticlesByDistanceFromCamera(System.Single)">
            <summary>
            Sorts the particles to draw particles furthest from the camera first, in order to achieve proper depth perspective.
            
            <para>NOTE: This operation is very expensive and should only be used when you are
            drawing particles with both opaque and semi-transparent portions, and not using additive blending.</para>
            <para>Merge Sort is the sorting algorithm used, as it tends to be best for linked lists.
            TODO - WHILE MERGE SORT SHOULD BE USED, DUE TO TIME CONSTRAINTS A (PROBABLY) SLOWER METHOD (QUICK-SORT)
            IS BEING USED INSTEAD. THIS FUNCTION NEEDS TO BE UPDATED TO USE MERGE SORT STILL.
            THE LINKED LIST MERGE SORT ALGORITHM CAN BE FOUND AT http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html</para>
            </summary>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="P:DPSF.DPSFDefaultSprite3DBillboardParticleSystem`2.CameraPosition">
            <summary>
            Get / Set the Position of the Camera.
            <para>NOTE: This should be Set (updated) every frame if Billboarding will be used (i.e. Always have the Particles face the Camera).</para>
            </summary>
        </member>
        <member name="M:DPSF.DefaultSprite3DBillboardParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultSprite3DBillboardParticle">
            <summary>
            Particle used by the Default Sprite 3D Billboard Particle System
            </summary>
        </member>
        <member name="T:DPSF.DefaultSpriteParticle">
            <summary>
            Particle used by the Default Sprite Particle System
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.Rotation">
            <summary>
            How much the Particle should be Rotated
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.Width">
            <summary>
            The Width of the Particle
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.Height">
            <summary>
            The Height of the Particle
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.FlipMode">
            <summary>
            Tells if the Sprite should be flipped Horizontally or Vertically
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.RotationalVelocity">
            <summary>
            The Particle's Rotational Velocity
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.RotationalAcceleration">
            <summary>
            The Particle's Rotational Acceleration
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.StartWidth">
            <summary>
            The Width of the Particle when it is born
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.StartHeight">
            <summary>
            The Height of the Particle when it is born
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.EndWidth">
            <summary>
            The Width of the Particle when it dies
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteParticle.EndHeight">
            <summary>
            The Height of the Particle when it dies
            </summary>
        </member>
        <member name="M:DPSF.DefaultSpriteParticle.Scale(System.Single)">
            <summary>
            Scales the Width and Height by the given amount.
            </summary>
            <param name="scale">The amount to scale the Width and Height by.</param>
        </member>
        <member name="M:DPSF.DefaultSpriteParticle.ScaleToWidth(System.Single)">
            <summary>
            Updates the Width to the given value and uniformly scales the Height to maintain the width-to-height ratio.
            </summary>
            <param name="newWidth">The Width the particle should have.</param>
        </member>
        <member name="M:DPSF.DefaultSpriteParticle.ScaleToHeight(System.Single)">
            <summary>
            Updates the Height to the given value and uniformly scales the Width to maintain the width-to-height ratio.
            </summary>
            <param name="newHeight">The Height the particle should have.</param>
        </member>
        <member name="M:DPSF.DefaultSpriteParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultSpriteParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="P:DPSF.DefaultSpriteParticle.Size">
            <summary>
            Sets the Width and Height properties to the given value.
            Gets the Width value, ignoring whether the Height value is the same or not.
            </summary>
        </member>
        <member name="P:DPSF.DefaultSpriteParticle.StartSize">
            <summary>
            Sets the StartWidth and StartHeight properties to the given value.
            Gets the StartWidth value, ignoring whether the StartHeight value is the same or not.
            </summary>
        </member>
        <member name="P:DPSF.DefaultSpriteParticle.EndSize">
            <summary>
            Sets the EndWidth and EndHeight properties to the given value.
            Gets the EndWidth value, ignoring whether the EndHeight value is the same or not.
            </summary>
        </member>
        <member name="F:DPSF.DefaultSprite3DBillboardParticle.DistanceFromCameraSquared">
            <summary>
            The squared distance between this particle and the camera.
            <para>NOTE: This property is only used if you are sorting the particles based on their distance 
            from the camera, otherwise you can use this property for whatever you like.</para>
            </summary>
        </member>
        <member name="M:DPSF.DefaultSprite3DBillboardParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultSprite3DBillboardParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="T:DPSF.DPSFDefaultSettings">
            <summary>
            Static class used to apply default settings to all DPSF particle systems and particle system managers when they are initialized.
            <para>Note: These settings are applied during particle system initialization, and may be overwritten by particle system manager settings.</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultSettings.#cctor">
            <summary>
            Initializes the <see cref="T:DPSF.DPSFDefaultSettings"/> class.
            This constructor cannot be explicitly called. It will be called the first time this class is accessed.
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultSettings.ResetToDefaults">
            <summary>
            Resets all of the DPSFDefaultSettings' properties to their default values.
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultSettings.AutoMemoryManagementSettings">
            <summary>
            Gets / Sets the default particle system memory management settings.
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultSettings.UpdatesPerSecond">
            <summary>
            Gets / Sets the default particle system updates per second.
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultSettings.PerformanceProfilingIsEnabled">
            <summary>
            Gets / Sets if particle system performance timings are Enabled by default or not.
            Performance profiling is not available on the Reach profile.
            </summary>
        </member>
        <member name="T:DPSF.RandomNumbers">
            <summary>
            Class that may be used to obtain random numbers. This class inherits the Random class
            and adds additional functionality.
            </summary>
        </member>
        <member name="M:DPSF.RandomNumbers.Between(System.Single,System.Single)">
            <summary>
            Returns a random number between the specified values
            </summary>
            <param name="fValue1">The first value</param>
            <param name="fValue2">The second value</param>
            <returns>Returns a random number between the specified values</returns>
        </member>
        <member name="M:DPSF.RandomNumbers.NextFloat">
            <summary>
            Returns a random number between 0.0f and 1.0f.
            </summary>
            <returns>Returns a random number between 0.0f and 1.0f.</returns>
        </member>
        <member name="T:DPSF.DefaultTexturedQuadTextureCoordinatesParticleSystem">
            <summary>
            The Default Textured Quad with Texture Coordinates Particle System to inherit from, which uses Default Textured Quad Texture Coordinates Particles
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultTexturedQuadTextureCoordinatesParticleSystem`2">
            <summary>
            The Default Textured Quad with Texture Coordinates Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="T:DPSF.DPSFDefaultTexturedQuadParticleSystem`2">
            <summary>
            The Default Textured Quad Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="T:DPSF.DPSFDefaultQuadParticleSystem`2">
            <summary>
            The Default Quad Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateVertexProperties(DPSF.DefaultQuadParticleVertex[]@,System.Int32,DPSF.DPSFParticle)">
            <summary>
            Function to update the Vertex properties according to the Particle properties
            </summary>
            <param name="sVertexBuffer">The array containing the Vertices to be drawn</param>
            <param name="iIndex">The Index in the array where the Particle's Vertex info should be placed</param>
            <param name="Particle">The Particle to copy the information from</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.SetEffectParameters">
            <summary>
            Virtual function to Set the Effect's Parameters before drawing the Particles
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.SetCameraPosition(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the camera position, so that the particles know how to make themselves face the camera if needed.
            </summary>
            <param name="cameraPosition">The camera position.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.InitializeParticleUsingInitialProperties(DPSF.DPSFParticle)">
            <summary>
            Function to Initialize a Default Particle with default settings
            </summary>
            <param name="Particle">The Particle to be Initialized</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleRotationUsingRotationalVelocity(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Update a Particle's Rotation according to its Rotational Velocity
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleRotationalVelocityUsingRotationalAcceleration(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Update a Particle's Rotational Velocity according to its Rotational Acceleration
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleRotationAndRotationalVelocityUsingRotationalAcceleration(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Update a Particle's Rotation and Rotational Velocity according to its Rotational Acceleration
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleWidthUsingLerp(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Linearly interpolate the Particle's Width between the Start and End Width according
            to the Particle's Normalized Lifetime
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleHeightUsingLerp(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Linearly interpolate the Particle's Height between the Start and End Height according
            to the Particle's Normalized Lifetime
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleWidthAndHeightUsingLerp(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Linearly interpolate the Particle's Width and Height between the Start and End values according
            to the Particle's Normalized Lifetime
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleToFaceTheCamera(DPSF.DefaultQuadParticle,System.Single)" -->
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleToBeConstrainedAroundXAxis(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Orientates the Particle to face the camera, but constrains the particle to always be perpendicular to the 
            Y-Z plane.
            </summary>
            <param name="cParticle">The Particle to update.</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleToBeConstrainedAroundYAxis(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Orientates the Particle to face the camera, but constrains the particle to always be perpendicular to the 
            X-Z plane (i.e standing straight up).
            </summary>
            <param name="cParticle">The Particle to update.</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleToBeConstrainedAroundZAxis(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Orientates the Particle to face the camera, but constrains the particle to always be perpendicular to the 
            X-Y plane.
            </summary>
            <param name="cParticle">The Particle to update.</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleDistanceFromCameraSquared(DPSF.DefaultQuadParticle,System.Single)">
            <summary>
            Updates the Particle's DistanceFromCameraSquared property to reflect how far this Particle is from the Camera.
            </summary>
            <param name="cParticle">The Particle to update.</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultQuadParticleSystem`2.UpdateParticleSystemToSortParticlesByDistanceFromCamera(System.Single)">
            <summary>
            Sorts the particles to draw particles furthest from the camera first, in order to achieve proper depth perspective.
            
            <para>NOTE: This operation is very expensive and should only be used when you are
            drawing particles with both opaque and semi-transparent portions, and not using additive blending.</para>
            <para>Merge Sort is the sorting algorithm used, as it tends to be best for linked lists.
            TODO - WHILE MERGE SORT SHOULD BE USED, DUE TO TIME CONSTRAINTS A (PROBABLY) SLOWER METHOD (QUICK-SORT)
            IS BEING USED INSTEAD. THIS FUNCTION NEEDS TO BE UPDATED TO USE MERGE SORT STILL.
            THE LINKED LIST MERGE SORT ALGORITHM CAN BE FOUND AT http://www.chiark.greenend.org.uk/~sgtatham/algorithms/listsort.html</para>
            </summary>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="P:DPSF.DPSFDefaultQuadParticleSystem`2.InitialProperties">
            <summary>
            Get the Settings used to specify the Initial Properties of a new Particle.
            <para>NOTE: These are only applied to the Particle when the InitializeParticleUsingInitialProperties()
            function is set as the Particle Initialization Function.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultQuadParticleSystem`2.CameraPosition">
            <summary>
            Get / Set the Position of the Camera.
            <para>NOTE: This should be Set (updated) every frame if Billboarding will be used (i.e. Always have the Particles face the Camera).</para>
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultQuadParticleSystem`2.CInitialPropertiesForQuad">
            <summary>
            Particle System Properties used to initialize a Particle's Properties.
            <para>NOTE: These are only applied to the Particle when the InitializeParticleUsingInitialProperties()
            function is set as the Particle Initialization Function.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultQuadParticleSystem`2.CInitialPropertiesForQuad.StartSizeMin">
            <summary>
            The Min Start Size for the particle's StartWidth and StartHeight properties.
            <para>NOTE: If this is greater than zero, this will be used instead of 
            the StartWidthMin and StartHeightMin properties.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultQuadParticleSystem`2.CInitialPropertiesForQuad.StartSizeMax">
            <summary>
            The Max Start Size for the particle's StartWidth and StartHeight properties.
            <para>NOTE: If this is greater than zero, this will be used instead of 
            the StartWidthMax and StartHeightMax properties.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultQuadParticleSystem`2.CInitialPropertiesForQuad.EndSizeMin">
            <summary>
            The Min End Size for the particle's EndWidth and EndHeight properties.
            <para>NOTE: If this is greater than zero, this will be used instead of 
            the EndWidthMin and EndHeightMin properties.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultQuadParticleSystem`2.CInitialPropertiesForQuad.EndSizeMax">
            <summary>
            The Max End Size for the particle's EndWidth and EndHeight properties.
            <para>NOTE: If this is greater than zero, this will be used instead of 
            the EndWidthMax and EndHeightMax properties.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultQuadParticleSystem`2.CInitialPropertiesForQuad.InterpolateBetweenMinAndMaxRotation">
            <summary>
            If true, the Rotation will be somewhere on the vector joining the Min Rotation to the Max Rotation.
            <para>If false, each of the XYZ components will be randomly calculated individually between the Min and Max Rotation XYZ values.</para>
            <para>Default value is false.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultQuadParticleSystem`2.CInitialPropertiesForQuad.InterpolateBetweenMinAndMaxRotationalVelocity">
            <summary>
            If true, the Rotational Velocity will be somewhere on the vector joining the Min Rotational Velocity to the Max Rotational Velocity.
            <para>If false, each of the XYZ components will be randomly calculated individually between the Min and Max Rotational Velocity XYZ values.</para>
            <para>Default value is false.</para>
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultQuadParticleSystem`2.CInitialPropertiesForQuad.InterpolateBetweenMinAndMaxRotationalAcceleration">
            <summary>
            If true, the Rotational Acceleration will be somewhere on the vector joining the Min Rotational Acceleration to the Max Rotational Acceleration.
            <para>If false, each of the XYZ components will be randomly calculated individually between the Min and Max Rotational Acceleration XYZ values.</para>
            <para>Default value is false.</para>
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultTexturedQuadParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultTexturedQuadParticleSystem`2.UpdateVertexProperties(DPSF.DefaultTexturedQuadParticleVertex[]@,System.Int32,DPSF.DPSFParticle)">
            <summary>
            Function to update the Vertex properties according to the Particle properties
            </summary>
            <param name="sVertexBuffer">The array containing the Vertices to be drawn</param>
            <param name="iIndex">The Index in the array where the Particle's Vertex info should be placed</param>
            <param name="Particle">The Particle to copy the information from</param>
        </member>
        <member name="M:DPSF.DPSFDefaultTexturedQuadParticleSystem`2.SetEffectParameters">
            <summary>
            Virtual function to Set the Effect's Parameters before drawing the Particles
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultTexturedQuadTextureCoordinatesParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultTexturedQuadTextureCoordinatesParticleSystem`2.UpdateVertexProperties(DPSF.DefaultTexturedQuadParticleVertex[]@,System.Int32,DPSF.DPSFParticle)">
            <summary>
            Function to update the Vertex properties according to the Particle properties
            </summary>
            <param name="sVertexBuffer">The array containing the Vertices to be drawn</param>
            <param name="iIndex">The Index in the array where the Particle's Vertex info should be placed</param>
            <param name="Particle">The Particle to copy the information from</param>
        </member>
        <member name="M:DPSF.DefaultTexturedQuadTextureCoordinatesParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultTextureQuadTextureCoordinatesParticle">
            <summary>
            Particle used by the Default Textured Quad with Texture Coordinates Particle System
            </summary>
        </member>
        <member name="T:DPSF.DefaultTexturedQuadParticle">
            <summary>
            Particle used by the Default Textured Quad Particle System
            </summary>
        </member>
        <member name="T:DPSF.DefaultQuadParticle">
            <summary>
            Particle used by the Default Quad Particle System
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.Orientation">
            <summary>
            The Orientation of the Particle
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.RotationalVelocity">
            <summary>
            The Rotational Velocity of the Particle.
            X = Pitch Velocity, Y = Yaw Velocity, Z = Roll Velocity in radians
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.RotationalAcceleration">
            <summary>
            The Rotational Acceleration of the Particle.
            X = Pitch Acceleration, Y = Yaw Acceleration, Z = Roll Acceleration in radians
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.Width">
            <summary>
            The Width of the Particle
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.Height">
            <summary>
            The Height of the Particle
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.StartWidth">
            <summary>
            The Width of the Particle when it is born
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.StartHeight">
            <summary>
            The Height of the Particle when it is born
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.EndWidth">
            <summary>
            The Width of the Particle when it dies
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.EndHeight">
            <summary>
            The Height of the Particle when it dies
            </summary>
        </member>
        <member name="M:DPSF.DefaultQuadParticle.Scale(System.Single)">
            <summary>
            Scales the Width and Height by the given amount.
            </summary>
            <param name="scale">The amount to scale the Width and Height by.</param>
        </member>
        <member name="M:DPSF.DefaultQuadParticle.ScaleToWidth(System.Single)">
            <summary>
            Updates the Width to the given value and uniformly scales the Height to maintain the width-to-height ratio.
            </summary>
            <param name="newWidth">The Width the particle should have.</param>
        </member>
        <member name="M:DPSF.DefaultQuadParticle.ScaleToHeight(System.Single)">
            <summary>
            Updates the Height to the given value and uniformly scales the Width to maintain the width-to-height ratio.
            </summary>
            <param name="newHeight">The Height the particle should have.</param>
        </member>
        <member name="F:DPSF.DefaultQuadParticle.DistanceFromCameraSquared">
            <summary>
            The squared distance between this particle and the camera.
            <para>NOTE: This property is only used if you are sorting the particles based on their distance 
            from the camera, otherwise you can use this property for whatever you like.</para>
            </summary>
        </member>
        <member name="M:DPSF.DefaultQuadParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultQuadParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="P:DPSF.DefaultQuadParticle.Size">
            <summary>
            Sets the Width and Height properties to the given value.
            Gets the Width value, ignoring whether the Height value is the same or not.
            </summary>
        </member>
        <member name="P:DPSF.DefaultQuadParticle.StartSize">
            <summary>
            Sets the StartWidth and StartHeight properties to the given value.
            Gets the StartWidth value, ignoring whether the StartHeight value is the same or not.
            </summary>
        </member>
        <member name="P:DPSF.DefaultQuadParticle.EndSize">
            <summary>
            Sets the EndWidth and EndHeight properties to the given value.
            Gets the EndWidth value, ignoring whether the EndHeight value is the same or not.
            </summary>
        </member>
        <member name="P:DPSF.DefaultQuadParticle.Normal">
            <summary>
            Get / Set the Normal (forward) direction of the Particle (i.e. which direction it is facing)
            </summary>
        </member>
        <member name="P:DPSF.DefaultQuadParticle.Up">
            <summary>
            Get / Set the Up direction of the Particle
            </summary>
        </member>
        <member name="P:DPSF.DefaultQuadParticle.Right">
            <summary>
            Get / Set the Right direction of the Particle
            </summary>
        </member>
        <member name="F:DPSF.DefaultTextureQuadTextureCoordinatesParticle.NormalizedTextureCoordinateLeftTop">
            <summary>
            The Normalized (0.0 - 1.0) Top-Left Texture Coordinate to use for the Particle's image
            </summary>
        </member>
        <member name="F:DPSF.DefaultTextureQuadTextureCoordinatesParticle.NormalizedTextureCoordinateRightBottom">
            <summary>
            The Normalized (0.0 - 1.0) Bottom-Right Texture Coordinate to use for the Particle's image
            </summary>
        </member>
        <member name="M:DPSF.DefaultTextureQuadTextureCoordinatesParticle.SetTextureCoordinates(Microsoft.Xna.Framework.Rectangle,System.Int32,System.Int32)">
            <summary>
            Sets the Normalized Texture Coordinates using the absolute (i.e. non-normalized) top-left coordinate and the dimensions of the Picture in the Texture
            </summary>
            <param name="sTextureCoordinates">The top-left Position and the Dimensions of the Picture in the Texture</param>
            <param name="iTextureWidth">The Width of the Texture that the Picture is in</param>
            <param name="iTextureHeight">The Height of the Texture that the Picture is in</param>
        </member>
        <member name="M:DPSF.DefaultTextureQuadTextureCoordinatesParticle.SetTextureCoordinates(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Normalized Texture Coordinates using the absolute (i.e. non-normalized) coordinates of the Picture in the Texture
            </summary>
            <param name="iLeft">The X position of the top-left corner of the Picture in the Texture</param>
            <param name="iTop">The Y position of the top-left corner of the Picture in the Texture</param>
            <param name="iRight">The X position of the bottom-right corner of the Picture in the Texture</param>
            <param name="iBottom">The Y position of the bottom-right corner of the Picture in the Texture</param>
            <param name="iTextureWidth">The Width of the Texture that the Picture is in</param>
            <param name="iTextureHeight">The Height of the Texture that the Picture is in</param>
        </member>
        <member name="M:DPSF.DefaultTextureQuadTextureCoordinatesParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultTextureQuadTextureCoordinatesParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="T:DPSF.DefaultSpriteParticleSystem">
            <summary>
            The Default Sprite Particle System to inherit from, which uses Default Sprite Particles
            </summary>
        </member>
        <member name="M:DPSF.DefaultSpriteParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultSpriteParticleVertex">
            <summary>
            Dummy structure used for the vertices of Default Sprites. Since Sprites are drawn using a 
            SpriteBatch, they do not have vertices, so this structure is empty.
            </summary>
        </member>
        <member name="T:DPSF.IDPSFParticleVertex">
            <summary>
            Interface that must be implemented by all Particle Vertex's
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleVertex.VertexElements">
            <summary>
            An array describing the Elements of each Vertex
            </summary>
        </member>
        <member name="P:DPSF.IDPSFParticleVertex.SizeInBytes">
            <summary>
            The Size of one Vertex Element in Bytes
            </summary>
        </member>
        <member name="P:DPSF.DefaultSpriteParticleVertex.VertexElements">
            <summary>
            An array describing the attributes of each Vertex
            </summary>
        </member>
        <member name="P:DPSF.DefaultSpriteParticleVertex.SizeInBytes">
            <summary>
            The Size of one Vertex in Bytes
            </summary>
        </member>
        <member name="T:DPSF.ParticleSystemManager">
            <summary>
            Class to manage the Updating and Drawing of DPSF Particle Systems each frame
            </summary>
        </member>
        <member name="F:DPSF.ParticleSystemManager._particleSystemBeingUpdated">
            <summary>
            Handle to the particle system whose Update() function is currently being called.
            We need this in case a PS removes itself from the Manager during its Update() function.
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DPSF.ParticleSystemManager"/> class.
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.#ctor(DPSF.ParticleSystemManager)">
            <summary>
            Initializes a new instance of the <see cref="T:DPSF.ParticleSystemManager"/> class, copying the settings of the given Particle System Manager.
            </summary>
            <param name="managerToCopy">The Particle System Manager to copy from.</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.CopyFrom(DPSF.ParticleSystemManager)">
            <summary>
            Copies the given DPSF Particle System Manager's information into this Manager.
            </summary>
            <param name="cManagerToCopy">The Particle System Manager to copy from.</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SetSimulationSpeedForAllParticleSystems(System.Single)">
            <summary>
            Sets each individual Particle Systems' Simulation Speed to the specified Simulation Speed.
            </summary>
            <param name="fSimulationSpeed">The new Simulation Speed that all Particle Systems 
            currently in this Manager should have</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SetUpdatesPerSecondForAllParticleSystems(System.Int32)">
            <summary>
            Sets each individual Particle Systems' Updates Per Second to the specified Updates Per Second.
            </summary>
            <param name="iUpdatesPerSecond">The new Updates Per Second that all particle systems
            currently in this Manager should have</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SetPerformanceProfilingIsEnabledForAllParticleSystems(System.Boolean)">
            <summary>
            Sets the PerformanceProfilingIsEnabled property of all particle systems in this manager to the given value.
            </summary>
            <param name="performanceProfilingIsEnabled">Set if Performance Profiling should be enabled or not.</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SetWorldViewProjectionMatricesForAllParticleSystems(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets the World, View, and Projection Matrices for all of the Particle Systems in this Manager.
            <para>NOTE: Sprite particle systems are not affected by the World, View, and Projection matrices.</para>
            </summary>
            <param name="cWorld">The World Matrix</param>
            <param name="cView">The View Matrix</param>
            <param name="cProjection">The Projection Matrix</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SetTransformationMatrixForAllSpriteParticleSystems(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Sets the SpriteBatchSettings.TransformationMatrix for all Sprite Particle Systems in this Manager.
            </summary>
            <param name="sTransformationMatrix">The Transformation Matrix to apply to the Sprite Particle Systems</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SetCameraPositionForAllParticleSystems(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the CameraPosition property of all particle systems in this manager to the given Camera Position.
            This is done by calling the particle system's virtual SetCameraPosition() function.
            </summary>
            <param name="cameraPosition">The current position of the Camera.</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.ContainsParticleSystem(DPSF.IDPSFParticleSystem)">
            <summary>
            Returns true if the given Particle System is in the Manager, false if not.
            </summary>
            <param name="cParticleSystemToFind">The Particle System to look for</param>
            <returns>Returns true if the given Particle System is in the Manager, false if not.</returns>
        </member>
        <member name="M:DPSF.ParticleSystemManager.ContainsParticleSystem(System.Int32)">
            <summary>
            Returns true if the Particle System with the given ID is in the Manager, false if not.
            </summary>
            <param name="iIDOfParticleSystemToFind">The ID of the Particle System to find</param>
            <returns>Returns true if the Particle System with the given ID is in the Manager, false if not.</returns>
        </member>
        <member name="M:DPSF.ParticleSystemManager.AddParticleSystem(DPSF.IDPSFParticleSystem)">
            <summary>
            Add an initialized Particle System to the Particle System Manager.
            <para>NOTE: This sets the Particle System's ParticleSystemManagerToCopyPropertiesFrom
            property to this Particle System Manager.</para>
            </summary>
            <param name="cParticleSystemToAdd">The initialized Particle System to add</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.RemoveParticleSystem(DPSF.IDPSFParticleSystem)">
            <summary>
            Removes the specified Particle System from the Particle System Manager.
            Returns true if the Particle System was found and removed, false if it was not found.
            </summary>
            <param name="cParticleSystemToRemove">A handle to the Particle System to Remove</param>
            <returns>Returns true if the Particle System was found and removed, false if it was not found.</returns>
        </member>
        <member name="M:DPSF.ParticleSystemManager.RemoveParticleSystem(System.Int32)">
            <summary>
            Removes the specified Particle System from the Particle System Manager.
            Returns true if the Particle System was found and removed, false if it was not found.
            </summary>
            <param name="iIDOfParticleSystemToRemove">The ID of the Particle System to Remove</param>
            <returns>Returns true if the Particle System was found and removed, false if it was not found.</returns>
        </member>
        <member name="M:DPSF.ParticleSystemManager.RemoveAllParticleSystems">
            <summary>
            Removes all Particle Systems from the Particle System Manager
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.AutoInitializeAllParticleSystems(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Content.ContentManager,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Calls the AutoInitialize() function for every Particle System in this Manager
            </summary>
            <param name="cGraphicsDevice">The Graphics Device that the Particle Systems should be drawn to</param>
            <param name="cContentManager">The Content Manager used to load Effect files and Textures</param>
            <param name="cSpriteBatch">The Sprite Batch that the Sprite Particle System should use to draw its particles.
            If this is not initializing a Sprite particle system, or you want the particle system to use its own Sprite Batch,
            pass in null.</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.DestroyAllParticleSystems">
            <summary>
            Calls the Destroy() function for every Particle System in this Manager
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.DestroyAndRemoveAllParticleSystems">
            <summary>
            Destroys each Particle System in the Manager, then removes them from the Manager
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.UpdateAllParticleSystems(System.Single)">
            <summary>
            Updates all of the Particle Systems.
            <para>NOTE: This will only Update the Particle Systems if they do not inherit from DrawableGameComponent, 
            since if they do they will be updated automatically by the Game object.</para>
            </summary>
            <param name="fElapsedTimeInSeconds">The amount of Time in seconds that has passed since
            the last Update</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.UpdateAllParticleSystemsForced(System.Single)">
            <summary>
            Updates all of the Particle Systems.
            <para>NOTE: If the Particle Systems inherit from DrawableGameComponent and this is called, the Particle
            Systems will be updated twice each frame; once here and once when called automatically by the game object.
            If not inheriting from DrawableGameComponent, this function acts the same as calling UpdateAllParticleSystems().</para>
            </summary>
            <param name="fElapsedTimeInSeconds">The amount of Time in seconds that has passed since
            the last Update</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.ResetParticleSystemBeingUpdatedVariables">
            <summary>
            Resets the variables used for determining if a PS removed itself from the PS Manager during its Update() function call.
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.DrawAllParticleSystems">
            <summary>
            Draws all of the Particle Systems.
            <para>NOTE: This will only Draw the Particle Systems if they do not inherit from DrawableGameComponent, 
            since if they do they will be drawn automatically by the Game object.</para>
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.DrawAllParticleSystemsForced">
            <summary>
            Draws all of the Particle Systems, even if they inherit from DrawableGameComponent.
            <para>NOTE: If the Particle Systems inherit from DrawableGameComponent and this is called, the Particle
            Systems will be drawn twice each frame; once here and once when called automatically by the game object.
            If not inheriting from DrawableGameComponent, this function acts the same as calling DrawAllParticleSystems().</para>
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.DrawAllParticleSystemsToTexture(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Draws all of the Particle Systems to a Texture and returns the Texture, which has a Transparent Black background
            </summary>
            <param name="cGraphicsDevice">A Graphics Device to use for drawing; The Graphics Device contents will not be overwritten.
            <para>NOTE: The size of the Texture before scaling will be the size of the Graphics Device's Viewport.</para></param>
            <param name="iTextureWidth">The desired Width of the Texture</param>
            <param name="iTextureHeight">The desired Height of the Texture</param>
            <returns>Returns a Texture with the Particle Systems in their current state drawn on it</returns>
        </member>
        <member name="M:DPSF.ParticleSystemManager.AddImageToTileSet(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.RenderTarget2D@,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Draws the given Texture to the given Tile Set Render Target at the specified Position.
            </summary>
            <param name="cGraphicsDevice">The Graphics Device used to do the drawing</param>
            <param name="cTileSetRenderTarget">The Tile Set Render Target to draw to</param>
            <param name="cTexture">The Texture to draw</param>
            <param name="sPositionAndDimensionsInTileSetToAddImage">The Position where the Texture should be drawn
            on the Tile Set Render Target, and its Dimensions</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.GetGraphicsDevicesCurrentRenderTarget(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Gets the graphics device's current render target, or null if it is not set.
            </summary>
            <param name="graphicsDevice">The graphics device.</param>
            <returns></returns>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SortParticleSystemLists">
            <summary>
            Sort the two Particle System Lists
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SortParticleSystemsByUpdateOrderList">
            <summary>
            Sorts the Particle System List Sorted By Update Order
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.SortParticleSystemsByDrawOrderList">
            <summary>
            Sorts the Particle System List Sorted By Draw Order
            </summary>
        </member>
        <member name="M:DPSF.ParticleSystemManager.ParticleSystem_UpdateOrderChanged(System.Object,System.EventArgs)">
            <summary>
            Records that the Particle Systems need to be resorted before doing the next Updates
            </summary>
            <param name="sender">The Object that sent the event</param>
            <param name="e">Extra information</param>
        </member>
        <member name="M:DPSF.ParticleSystemManager.ParticleSystem_DrawOrderChanged(System.Object,System.EventArgs)">
            <summary>
            Records that the Particle Systems need to be resorted before doing the next Draws
            </summary>
            <param name="sender">The Object that sent the event</param>
            <param name="e">Extra information</param>
        </member>
        <member name="P:DPSF.ParticleSystemManager.ParticleSystemsInheritDrawableGameComponent">
            <summary>
            Get if the Particle Systems are inheriting from DrawableGameComponent or not
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.Enabled">
            <summary>
            Get / Set if the Particle Systems should be Updated or not
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.Visible">
            <summary>
            Get / Set if this Particle Systems should be drawn or not.
            <para>NOTE: Setting this to false causes the particle systems' Draw() function to not be called, including the 
            particle systems' BeforeDraw() and AfterDraw() functions.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.SimulationSpeedIsEnabled">
            <summary>
            Get / Set if the Particle System Manager's SimulationSpeed property
            should be used for each of the particle systems it contains or not.
            <para>Default value is true.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.UpdatesPerSecondIsEnabled">
            <summary>
            Get / Set if the Particle System Manager's UpdatesPerSecond property
            should be used for each of the particle systems it contains or not.
            <para>Default value is true.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.SimulationSpeed">
            <summary>
            Get / Set how fast the Particle System Simulations should run. 
            <para>Example: 1.0 = normal speed, 0.5 = half speed, 2.0 = double speed.</para>
            <para>NOTE: This sets the SimulationSpeed property of each individual Particle
            System in this Manager to the given value. It will also set a particle system's
            Simulation Speed when the particle system is re-initialized, 
            and when a new Particle System is added to the Manager in the future.</para>
            <para>NOTE: Setting this property only has an effect if the SimulationSpeedIsEnabled property is true.</para>
            <para>NOTE: This will be set to zero if a negative value is specified.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.UpdatesPerSecond">
            <summary>
            Get / Set how often the Particle Systems should be Updated. 
            <para>NOTE: This sets the UpdatesPerSecond property of each individual Particle
            System in this Manager to the given value. It will also set a particle system's
            Updates Per Second when the particle system is re-initialized, 
            and when a new Particle System is added to the Manager in the future.</para>
            <para>NOTE: Setting this property only has an effect if the UpdatesPerSecondIsEnabled property is true.</para>
            <para>NOTE: A value of zero means update the particle systems every time Update() is called.</para>
            <para>NOTE: This will be set to zero if a negative value is specified.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.TotalNumberOfActiveParticles">
            <summary>
            Get the cumulative Number Of Active Particles of all Particle Systems in this Manager
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.TotalNumberOfParticlesBeingDrawn">
            <summary>
            Get the cumulative Number Of Particles Being Drawn by all Particle Systems in this Manager.
            This is the total number of Active AND Visible Particles.
            <para>NOTE: This ignores whether the Manager is Visible or not.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.TotalNumberOfParticlesAllocatedInMemory">
            <summary>
            Get the cumulative Max Number Of Particles allocated in memory by all Particle Systems in the Manager.
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.TotalPerformanceTimeToDoUpdatesInMilliseconds">
            <summary>
            Gets the cumulative time (in milliseconds) it took to perform the Update() function on each particle system in this manager.
            <para>Note: Only particle systems that have their PerformanceProfilingIsEnabled property set to true will be included in this total.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.TotalPerformanceTimeToDoDrawsInMilliseconds">
            <summary>
            Gets the cumulative time (in milliseconds) it took to perform the Draw() function on each particle system in this manager.
            <para>Note: Only particle systems that have their PerformanceProfilingIsEnabled property set to true will be included in this total.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleSystemManager.ParticleSystems">
            <summary>
            Returns a Linked List of handles to the Particle Systems in this Manager
            </summary>
        </member>
        <member name="T:DPSF.Position2D">
            <summary>
            Class used to hold and update an object's 2D Position, Velocity, and Acceleration
            </summary>
        </member>
        <member name="F:DPSF.Position2D.Position">
            <summary>
            The object's 2D Position
            </summary>
        </member>
        <member name="F:DPSF.Position2D.Velocity">
            <summary>
            The object's Position
            </summary>
        </member>
        <member name="F:DPSF.Position2D.Acceleration">
            <summary>
            The object's Acceleration
            </summary>
        </member>
        <member name="M:DPSF.Position2D.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:DPSF.Position2D.#ctor(DPSF.Position2D)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cPositionToCopy">The Position2D object to copy</param>
        </member>
        <member name="M:DPSF.Position2D.CopyFrom(DPSF.Position2D)">
            <summary>
            Copies the given Position2D object's data into this objects data
            </summary>
            <param name="cPositionToCopy">The Position2D object to copy</param>
        </member>
        <member name="M:DPSF.Position2D.Update(System.Single)">
            <summary>
            Update the Position and Velocity according to the Acceleration
            </summary>
            <param name="fElapsedTimeInSeconds">The time Elapsed in Seconds since the last Update</param>
        </member>
        <member name="P:DPSF.Position2D.PositionVector3">
            <summary>
            Get / Set the object's 2D Position using a Vector3.
            <para>NOTE: The Z-value is ignored when Setting, and is given a value of zero when Getting.</para>
            <para>NOTE: This function is provided for convenience when using 3D Vectors in 2D coordinate systems.</para>
            </summary>
        </member>
        <member name="P:DPSF.Position2D.VelocityVector3">
            <summary>
            Get / Set the object's 2D Velocity using a Vector3.
            <para>NOTE: The Z-value is ignored when Setting, and is given a value of zero when Getting.</para>
            <para>NOTE: This function is provided for convenience when using 3D Vectors in 2D coordinate systems.</para>para>
            </summary>
        </member>
        <member name="P:DPSF.Position2D.AccelerationVector3">
            <summary>
            Get / Set the object's 2D Acceleration using a Vector3.
            <para>NOTE: The Z-value is ignored when Setting, and is given a value of zero when Getting.</para>
            <para>NOTE: This function is provided for convenience when using 3D Vectors in 2D coordinate systems.</para>para>
            </summary>
        </member>
        <member name="T:DPSF.Position3D">
            <summary>
            Class used to hold and update an object's 3D Position, Velocity, and Acceleration
            </summary>
        </member>
        <member name="F:DPSF.Position3D.Position">
            <summary>
            The object's Position
            </summary>
        </member>
        <member name="F:DPSF.Position3D.Velocity">
            <summary>
            The object's Velocity
            </summary>
        </member>
        <member name="F:DPSF.Position3D.Acceleration">
            <summary>
            The object's Acceleration
            </summary>
        </member>
        <member name="M:DPSF.Position3D.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:DPSF.Position3D.#ctor(DPSF.Position3D)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cPositionToCopy">The Position3D object to copy</param>
        </member>
        <member name="M:DPSF.Position3D.CopyFrom(DPSF.Position3D)">
            <summary>
            Copy the given Position3D object's data into this objects data
            </summary>
            <param name="cPositionToCopy">The Position3D to copy from</param>
        </member>
        <member name="M:DPSF.Position3D.Update(System.Single)">
            <summary>
            Update the Position and Velocity according to the Acceleration
            </summary>
            <param name="fElapsedTimeInSeconds">The time Elapsed in Seconds since the last Update</param>
        </member>
        <member name="T:DPSF.Orientation2D">
            <summary>
            Class to hold and update an object's 2D Orientation, Rotational Velocity, and Rotational Acceleration
            </summary>
        </member>
        <member name="F:DPSF.Orientation2D.Orientation">
            <summary>
            The object's Rotation (in radians) (i.e. How much it is currently rotated)
            </summary>
        </member>
        <member name="F:DPSF.Orientation2D.RotationalVelocity">
            <summary>
            The object's Rotational Velocity (in radians)
            </summary>
        </member>
        <member name="F:DPSF.Orientation2D.RotationalAcceleration">
            <summary>
            The object's Rotational Acceleration (in radians)
            </summary>
        </member>
        <member name="M:DPSF.Orientation2D.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:DPSF.Orientation2D.#ctor(DPSF.Orientation2D)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cOrienationToCopy">The Orientation2D object to copy</param>
        </member>
        <member name="M:DPSF.Orientation2D.CopyFrom(DPSF.Orientation2D)">
            <summary>
            Copies the given Orientation2D object's data into this object's data
            </summary>
            <param name="cOrientationToCopy">The Orientation2D object to copy from</param>
        </member>
        <member name="M:DPSF.Orientation2D.Rotate(System.Single)">
            <summary>
            Applies the given Rotation to the object's Orientation
            </summary>
            <param name="fRotation">The Rotation in radians that should be applied to the object</param>
        </member>
        <member name="M:DPSF.Orientation2D.Update(System.Single)">
            <summary>
            Update the Orientation and Rotational Velocity according to the Rotational Acceleration
            </summary>
            <param name="fElapsedTimeInSeconds">The time Elapsed in Seconds since the last Update</param>
        </member>
        <member name="M:DPSF.Orientation2D.Rotate(System.Single,System.Single)">
            <summary>
            Returns the new Orientation after applying the given Rotation
            </summary>
            <param name="fRotationToApply">The Rotation in radians to apply to the Current Orientation</param>
            <param name="fCurrentOrientation">The object's Current Orientation in radians</param>
            <returns>Returns the new Orientation after applying the given Rotation</returns>
        </member>
        <member name="M:DPSF.Orientation2D.GetRotationTo(System.Single,System.Single)">
            <summary>
            Returns the Rotation needed to rotate the object from the Current Rotation to
            the Desired Rotation
            </summary>
            <param name="fCurrentRotation">The object's Current Rotation in radians</param>
            <param name="fDesiredRotation">The object's Desired Rotation in radians</param>
            <returns>Returns the Rotation needed to rotate the object from the Current Rotation to
            the Desired Rotation</returns>
        </member>
        <member name="T:DPSF.DefaultTexturedQuadParticleSystem">
            <summary>
            The Default Textured Quad Particle System to inherit from, which uses Default Textured Quad Particles
            </summary>
        </member>
        <member name="M:DPSF.DefaultTexturedQuadParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultTexturedQuadParticleVertex">
            <summary>
            Structure used to hold a Default Textured Quad Particle's Vertex's properties used for drawing.
            This contains a Vector3 Position, Vector2 TextureCoordinate, and Color Color.
            </summary>
        </member>
        <member name="F:DPSF.DefaultTexturedQuadParticleVertex.Position">
            <summary>
            The Position of the vertex in 3D space. The position of this vertex
            relative to the quads other three vertices determines the Particle's orientation.
            </summary>
        </member>
        <member name="F:DPSF.DefaultTexturedQuadParticleVertex.TextureCoordinate">
            <summary>
            The Coordinate of the Texture that this Vertex corresponds to
            </summary>
        </member>
        <member name="F:DPSF.DefaultTexturedQuadParticleVertex.Color">
            <summary>
            The Color to tint the Texture
            </summary>
        </member>
        <member name="P:DPSF.DefaultTexturedQuadParticleVertex.VertexElements">
            <summary>
            An array describing the attributes of each Vertex
            </summary>
        </member>
        <member name="P:DPSF.DefaultTexturedQuadParticleVertex.SizeInBytes">
            <summary>
            The Size of one Vertex in Bytes
            </summary>
        </member>
        <member name="T:DPSF.DefaultSpriteTextureCoordinatesParticleSystem">
            <summary>
            The Default Sprite with Texture Coordinates Particle System to inherit from, which uses Default Sprite with Texture Coordinates Particles
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultSpriteTextureCoordinatesParticleSystem`2">
            <summary>
            The Default Sprite with Texture Coordinates Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteTextureCoordinatesParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSpriteTextureCoordinatesParticleSystem`2.DrawSprite(DPSF.DPSFParticle,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Function to draw a Sprite Particle. This function should be used to draw the given
            Particle with the provided SpriteBatch.
            </summary>
            <param name="Particle">The Particle Sprite to Draw</param>
            <param name="cSpriteBatch">The SpriteBatch to use to doing the Drawing</param>
        </member>
        <member name="M:DPSF.DefaultSpriteTextureCoordinatesParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultSpriteTextureCoordinatesParticle">
            <summary>
            Particle used by the Default Sprite with Texture Coordinates Particle System
            </summary>
        </member>
        <member name="F:DPSF.DefaultSpriteTextureCoordinatesParticle.TextureCoordinates">
            <summary>
            The top-left Position and the Dimensions of this Picture in the Texture
            </summary>
        </member>
        <member name="M:DPSF.DefaultSpriteTextureCoordinatesParticle.SetTextureCoordinates(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the Texture Coordinates to use for the Picture that represents this Particle.
            </summary>
            <param name="textureCoordinates">The top-left Position and the Dimensions of the Picture in the Texture.</param>
        </member>
        <member name="M:DPSF.DefaultSpriteTextureCoordinatesParticle.SetTextureCoordinates(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Texture Coordinates to use for the Picture that represents this Particle.
            </summary>
            <param name="iLeft">The X position of the top-left corner of the Picture in the Texture</param>
            <param name="iTop">The Y position of the top-left corner of the Picture in the Texture</param>
            <param name="iRight">The X position of the bottom-right corner of the Picture in the Texture</param>
            <param name="iBottom">The Y position of the bottom-right corner of the Picture in the Texture</param>
        </member>
        <member name="M:DPSF.DefaultSpriteTextureCoordinatesParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultSpriteTextureCoordinatesParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="T:DPSF.DefaultAnimatedSpriteParticleSystem">
            <summary>
            The Default Animated Sprite Particle System to inherit from, which uses Default Animated Sprite Particles
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultAnimatedSpriteParticleSystem`2">
            <summary>
            The Default Animated Sprite Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedSpriteParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedSpriteParticleSystem`2.UpdateParticleAnimationAndTextureCoordinates(DPSF.DefaultAnimatedSpriteParticle,System.Single)">
            <summary>
            Updates the Animation, as well as the Particle's Texture Coordinates to match the Animation
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedSpriteParticleSystem`2.UpdateParticleToDieOnceAnimationFinishesPlaying(DPSF.DefaultAnimatedSpriteParticle,System.Single)">
            <summary>
            Updates the Particle to be removed from the Particle System once the Animation finishes Playing
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DefaultAnimatedSpriteParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultAnimatedSpriteParticle">
            <summary>
            Particle used by the Default Animated Sprite Particle System
            </summary>
        </member>
        <member name="F:DPSF.DefaultAnimatedSpriteParticle.Animation">
            <summary>
            Class to hold this Particle's Animation information
            </summary>
        </member>
        <member name="M:DPSF.DefaultAnimatedSpriteParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultAnimatedSpriteParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="T:DPSF.DefaultSprite3DBillboardTextureCoordinatesParticleSystem">
            <summary>
            The Default Sprite Particle System to inherit from, which uses Default Sprite Particles.
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultSprite3DBillboardTextureCoordinates`2">
            <summary>
            The Default Sprite 3D Billboard Particle System class.
            This class just inherits from the Default Sprite Particle System class and overrides the DrawSprite()
            function to draw the sprites as Billboards in 3D space.
            </summary>
            <typeparam name="Particle">The Particle class to use.</typeparam>
            <typeparam name="Vertex">The Vertex Format to use.</typeparam>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardTextureCoordinates`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultSprite3DBillboardTextureCoordinates`2.DrawSprite(DPSF.DPSFParticle,Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Function to draw a Sprite Particle. This function should be used to draw the given
            Particle with the provided SpriteBatch.
            </summary>
            <param name="Particle">The Particle Sprite to Draw</param>
            <param name="cSpriteBatch">The SpriteBatch to use to doing the Drawing</param>
        </member>
        <member name="M:DPSF.DefaultSprite3DBillboardTextureCoordinatesParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this.
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultSprite3DBillboardTextureCoordinatesParticle">
            <summary>
            Particle used by the Default Sprite 3D Billboard Particle System
            </summary>
        </member>
        <member name="F:DPSF.DefaultSprite3DBillboardTextureCoordinatesParticle.TextureCoordinates">
            <summary>
            The top-left Position and the Dimensions of this Picture in the Texture
            </summary>
        </member>
        <member name="M:DPSF.DefaultSprite3DBillboardTextureCoordinatesParticle.SetTextureCoordinates(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Sets the Texture Coordinates to use for the Picture that represents this Particle.
            </summary>
            <param name="textureCoordinates">The top-left Position and the Dimensions of the Picture in the Texture.</param>
        </member>
        <member name="M:DPSF.DefaultSprite3DBillboardTextureCoordinatesParticle.SetTextureCoordinates(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Texture Coordinates to use for the Picture that represents this Particle
            </summary>
            <param name="iLeft">The X position of the top-left corner of the Picture in the Texture</param>
            <param name="iTop">The Y position of the top-left corner of the Picture in the Texture</param>
            <param name="iRight">The X position of the bottom-right corner of the Picture in the Texture</param>
            <param name="iBottom">The Y position of the bottom-right corner of the Picture in the Texture</param>
        </member>
        <member name="M:DPSF.DefaultSprite3DBillboardTextureCoordinatesParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultSprite3DBillboardTextureCoordinatesParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="T:DPSF.Orientation3D">
            <summary>
            Class to hold and update an object's 3D Orientation, Rotational Velocity, and Rotational Acceleration
            </summary>
        </member>
        <member name="F:DPSF.Orientation3D.Orientation">
            <summary>
            The object's Orientation
            </summary>
        </member>
        <member name="F:DPSF.Orientation3D.RotationalVelocity">
            <summary>
            The object's Rotational Velocity around its center.
            <para>NOTE: Rotations are specified by giving a 3D Vector, where the direction is the axis to 
            rotate around, and the vector length is the amount (angle in radians) to rotate.
            It can also be thought of as Vector(PitchVelocity, YawVelocity, RollVelocity).</para>
            </summary>
        </member>
        <member name="F:DPSF.Orientation3D.RotationalAcceleration">
            <summary>
            The object's Rotational Acceleration around its center.
            <para>NOTE: Rotations are specified by giving a 3D Vector, where the direction is the axis to 
             rotate around, and the vector length is the amount (angle in radians) to rotate.
             It can also be thought of as Vector(PitchAcceleration, YawAcceleration, RollAcceleration).</para>
            </summary>
        </member>
        <member name="M:DPSF.Orientation3D.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:DPSF.Orientation3D.#ctor(DPSF.Orientation3D)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cOrienationToCopy">The Orienation3D object to copy</param>
        </member>
        <member name="M:DPSF.Orientation3D.CopyFrom(DPSF.Orientation3D)">
            <summary>
            Copies the given Orientation3D object's data into this object's data
            </summary>
            <param name="cOrientationToCopy">The Orientation3D object to copy from</param>
        </member>
        <member name="M:DPSF.Orientation3D.Rotate(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Rotates the object about its center, changing its Orientation
            </summary>
            <param name="sRotationMatrix">The Rotation to apply to the object</param>
        </member>
        <member name="M:DPSF.Orientation3D.Update(System.Single)">
            <summary>
            Update the Position and Velocity according to the Acceleration, as well as the Orientation
            according to the Rotational Velocity and Rotational Acceleration
            </summary>
            <param name="fElapsedTimeInSeconds">The time Elapsed in Seconds since the last Update</param>
        </member>
        <member name="M:DPSF.Orientation3D.Rotate(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Returns the given Quaternion rotated about its center, changing its Orientation
            </summary>
            <param name="sRotationMatrix">The Rotation to apply to the Quaternion</param>
            <param name="sQuaterionToRotate">The Quaternion that should be Rotated</param>
            <returns>Returns the given Quaternion rotated about its center, changing its Orientation</returns>
        </member>
        <member name="M:DPSF.Orientation3D.GetRotationTo(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the shortest arc Quaternion Rotation needed to rotate the CurrentDirection to
            be the same as the DestinationDirection.
            This method is based on Stan Melax's article in Game Programming Gems, and
            the code was referenced from OgreVector3.h of the Ogre library (www.Ogre3d.org)
            </summary>
            <param name="CurrentDirection">The current Direction the Vector is facing</param>
            <param name="DesiredDirection">The Direction we want the Vector to face</param>
            <returns>Returns the shortest arc Quaternion Rotation needed to rotate the CurrentDirection to
            be the same as the DestinationDirection.</returns>
        </member>
        <member name="M:DPSF.Orientation3D.GetRotationTo(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the shortest arc Quaternion Rotation needed to rotate the CurrentDirection to
            be the same as the DestinationDirection.
            This method is based on Stan Melax's article in Game Programming Gems, and
            the code was referenced from OgreVector3.h of the Ogre library (www.Ogre3d.org)
            </summary>
            <param name="CurrentDirection">The current Direction the Vector is facing</param>
            <param name="DesiredDirection">The Direction we want the Vector to face</param>
            <param name="sFallbackAxis">The Axis to rotate around if a 180 degree rotation is required</param>
            <returns>Returns the shortest arc Quaternion Rotation needed to rotate the CurrentDirection to
            be the same as the DestinationDirection.</returns>
        </member>
        <member name="M:DPSF.Orientation3D.GetQuaternionWithOrientation(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a Quaternion orientated according to the given Normal and Up Directions
            </summary>
            <param name="sNormalDirection">The Normal (forward) direction that the Quaternion should face</param>
            <param name="sUpDirection">The Up direction that the Quaternion should have</param>
            <returns>Returns a Quaternion orientated according to the given Normal and Up Directions</returns>
        </member>
        <member name="M:DPSF.Orientation3D.GetNormalDirection(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Returns the Normal (Forward) Direction of the given Quaternion
            </summary>
            <param name="sOrientation">The Quaternion whose Direction we want</param>
            <returns>Returns the Normal (Forward) Direction of the given Quaternion</returns>
        </member>
        <member name="M:DPSF.Orientation3D.SetNormalDirection(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the Normal direction of the given Quaternion to be the given New Normal Direction
            </summary>
            <param name="sOrientation">The Quaternion to modify</param>
            <param name="sNewNormalDirection">The New Normal Direction the Quaternion should have</param>
        </member>
        <member name="M:DPSF.Orientation3D.GetUpDirection(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Returns the Up Direction of the given Quaternion
            </summary>
            <param name="sOrientation">The Quaternion whose Direction we want</param>
            <returns>Returns the Up Direction of the given Quaternion</returns>
        </member>
        <member name="M:DPSF.Orientation3D.SetUpDirection(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the Up direction of the given Quaternion to be the given New Up Direction
            </summary>
            <param name="sOrientation">The Quaternion to modify</param>
            <param name="sNewUpDirection">The New Up Direction the Quaternion should have</param>
        </member>
        <member name="M:DPSF.Orientation3D.GetRightDirection(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Returns the Right Direction of the given Quaternion
            </summary>
            <param name="sOrientation">The Quaternion whose Direction we want</param>
            <returns>Returns the Right Direction of the given Quaternion</returns>
        </member>
        <member name="M:DPSF.Orientation3D.SetRightDirection(Microsoft.Xna.Framework.Quaternion@,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the Right direction of the given Quaternion to be the given New Right Direction
            </summary>
            <param name="sOrientation">The Quaternion to modify</param>
            <param name="sNewRightDirection">The New Right Direction the Quaternion should have</param>
        </member>
        <member name="P:DPSF.Orientation3D.Normal">
            <summary>
            Get / Set the Normal (i.e. Forward) direction of the object (i.e. which direction it is facing)
            </summary>
        </member>
        <member name="P:DPSF.Orientation3D.Up">
            <summary>
            Get / Set the Up direction of the object
            </summary>
        </member>
        <member name="P:DPSF.Orientation3D.Right">
            <summary>
            Get / Set the Right direction of the object
            </summary>
        </member>
        <member name="T:DPSF.Animations">
            <summary>
            Class to hold a List of Animations and the texture coordintes of the Pictures used by the Animations.
            To start, Create Picture's of all images that will be used in any Animations. Then Create an Animation
            by specifying the order of the Picture IDs to go through, and the speed to flip through them at (i.e. frame-rate).
            </summary>
        </member>
        <member name="M:DPSF.Animations.CopyFrom(DPSF.Animations)">
            <summary>
            Copies the given Animations data into this Animation
            </summary>
            <param name="cAnimationToCopy">The Animation to Copy from</param>
        </member>
        <member name="M:DPSF.Animations.CreatePicture(Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Creates a Picture that can be used in a Animation, and returns its unique ID. 
            A Picture can be used multiple times in an Animation.
            </summary>
            <param name="sTextureCoordinates">The top-left (x,y) position and (width,height) dimensions
            in the Texture that form this Picture</param>
            <returns>Returns the new Picture's unique ID.</returns>
        </member>
        <member name="M:DPSF.Animations.CreatePicturesFromTileSet(System.Int32,System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Automatically creates the specified Total Number Of Pictures. All pictures are assumed to have 
            the same width and height, as specified in the First Picture rectangle. Also, the First Picture
            is assumed to be at the top-left corner of the Tileset.
            <para>Pictures are created in left-to-right, top-to-bottom order. The ID of the first Picture created
            is returned, with each new Picture created incrementing the ID value, so the last Picture created
            will have an ID of (returned ID + (Total Number Of Pictures - 1)).</para>
            </summary>
            <param name="iTotalNumberOfPictures">The Total Number Of Pictures in the Tileset</param>
            <param name="iPicturesPerRow">How many Pictures are in a row in the texture</param>
            <param name="sFirstPicture">The Position of the top-left Picture in the Tileset, and the
            width and height of each Picture in the Tileset</param>
            <returns>The ID of the first Picture created
            is returned, with each new Picture created incrementing the ID value, so the last Picture created
            will have an ID of (returned ID + (Total Number Of Pictures - 1)).</returns>
        </member>
        <member name="M:DPSF.Animations.CreateAnimation(System.Collections.Generic.List{System.Int32},System.Single,System.Int32)">
            <summary>
            Creates a new Animation and returns the Animation's unique ID.
            <para>NOTE: Returns -1 if an invalid Picture ID was specified in the PictureRotationOrder.</para>
            <para>NOTE: Be sure to Create the Pictures before creating the Animation.</para>
            </summary>
            <param name="cPictureRotationOrder">A List of Picture IDs that specifies the Order of Pictures
            to Rotate through in order to produce the Animation. A single Picture ID can be used many times.</param>
            <param name="fPictureRotationTime">How long (in seconds) to wait before switching to the
            next Picture in the Picture Rotation Order (i.e. The frame-rate of the Animation)</param>
            <param name="iNumberOfTimesToPlay">The number of times this Animation should be played 
            (it replays when the end of the Animation is reached). Specify a value of zero to have the 
            Animation repeat forever</param>
            <returns>Returns the new Animation's unique ID.</returns>
        </member>
        <member name="M:DPSF.Animations.CreateAnimation(System.Int32[],System.Single,System.Int32)">
            <summary>
            Creates a new Animation and returns the Animation's unique ID.
            <para>NOTE: Returns -1 if an invalid Picture ID was specified in the PictureRotationOrder.</para>
            <para>NOTE: Be sure to Create the Pictures before creating the Animation.</para>
            </summary>
            <param name="iaPictureRotationOrder">An array of Picture IDs that specifies the Order of Pictures
            to Rotate through in order to produce the Animation</param>
            <param name="fPictureRotationTime">How long (in seconds) to wait before switching to the
            next Picture in the Picture Rotation Order (i.e. The next Frame in the Animation)</param>
            <param name="iNumberOfTimesToPlay">The number of times this Animation should be played 
            (it replays when the end of the Animation is reached). Specify a value of zero to have the 
            Animation repeat forever</param>
            <returns>Returns the new Animation's unique ID.
            NOTE: Returns -1 if an invalid Picture ID was specified in the PictureRotationOrder.</returns>
        </member>
        <member name="M:DPSF.Animations.PictureIDIsValid(System.Int32)">
            <summary>
            Returns true if the given Picture ID is valid (i.e. A Picture with the same ID exists).
            </summary>
            <param name="iPictureID">The Picture ID to look for</param>
            <returns>Returns true if the given Picture ID is valid (i.e. A Picture with the same ID exists).</returns>
        </member>
        <member name="M:DPSF.Animations.AnimationIDIsValid(System.Int32)">
            <summary>
            Returns true if the given Animation ID is valid (i.e. An Animation with the same ID exists).
            </summary>
            <param name="iAnimationID">The Animation ID to look for</param>
            <returns>Returns true if the given Animation ID is valid (i.e. An Animation with the same ID exists).</returns>
        </member>
        <member name="M:DPSF.Animations.SetCurrentAnimationAndPositionInAnimation(System.Int32,System.Int32)">
            <summary>
            Sets the Current Animation being used, as well as what index in the Animation's Picture Rotation
            Order the Animation should start at. 
            <para>NOTE: If the specified Animiation to use is not valid, the Current Animation will not be 
            changed, and if the specified Picture Rotation Order Index is not valid, the Animation will 
            start from the beginning of the Animation.</para>
            </summary>
            <param name="iAnimationID">The ID of the Animation to use</param>
            <param name="iPictureRotationOrderIndex">The Index in the Animation's Picture Rotation Order
            that the Animation should begin playing from</param>
        </member>
        <member name="M:DPSF.Animations.GetAnimationsPictureRotationTime(System.Int32)">
            <summary>
            Returns how much Time (in seconds) should elapse before switching frames in the Animation.
            <para>NOTE: Returns zero if the specified Animation ID is not valid.</para>
            </summary>
            <param name="iAnimationID">The ID of the Animation containing the Picture Rotation Time to retrive</param>
            <returns>Returns how much Time (in seconds) should elapse before switching frames in the Animation.
            NOTE: Returns zero if the specified Animation ID is not valid.</returns>
        </member>
        <member name="M:DPSF.Animations.SetAnimationsPictureRotationTime(System.Int32,System.Single)">
            <summary>
            Sets how much Time should elapse before switching frames in the Animation
            </summary>
            <param name="iAnimationID">The ID of the Animation to update</param>
            <param name="fNewPictureRotationTime">The Time (in seconds) to wait before moving to the
            next Picture in the Animations Picture Rotation Order</param>
        </member>
        <member name="M:DPSF.Animations.GetAnimationsNumberOfTimesToPlay(System.Int32)">
            <summary>
            Returns the Number of times the given Animation ID is set to Play.
            Zero means the Animation will repeat forever.
            <para>NOTE: If the given Animation ID is invalid, -1 is returned.</para>
            </summary>
            <param name="iAnimationID">The ID of the Animation to update</param>
            <returns>Returns the Number of times the given Animation ID is set to Play.
            Zero means the Animation will repeat forever.
            NOTE: If the given Animation ID is invalid, -1 is returned.</returns>
        </member>
        <member name="M:DPSF.Animations.SetAnimationsNumberOfTimesToPlay(System.Int32,System.Int32)">
            <summary>
            Sets the Number of times the given Animation ID should Play
            (it replays when the end of the Animation is reached). 
            Specify a value of zero to have the Animation repeat forever.
            <para>NOTE: If the given Animation ID is invalid, no changes are made.</para>
            </summary>
            <param name="iAnimationID">The ID of the Animation to update</param>
            <param name="iNewNumberOfTimesToPlay">The New Number of times the Animation should Play</param>
        </member>
        <member name="M:DPSF.Animations.TimeRequiredToPlayAnimation(System.Int32)">
            <summary>
            Returns the amount of Time required to play the specified Animation.
            <para>NOTE: If an invalid AnimationID is specified, zero is returned.</para>
            </summary>
            <param name="iAnimationID">The ID of the Animation to check</param>
            <returns>Returns the amount of Time required to play the specified Animation.
            NOTE: If an invalid AnimationID is specified, zero is returned.</returns>
        </member>
        <member name="M:DPSF.Animations.GetPicturesTextureCoordinates(System.Int32)">
            <summary>
            Returns the Rectangle representing the Texture Coordinates of the specified Picture.
            </summary>
            <param name="iPictureID">The Picture ID of the Picture whose Texture Coordinates 
            should be retrieved</param>
            <returns>Returns the Rectangle representing the Texture Coordinates of the specified Picture.</returns>
        </member>
        <member name="M:DPSF.Animations.Update(System.Single)">
            <summary>
            Updates the Animation according to how much time has elapsed
            </summary>
            <param name="fElapsedTime">The amount of Time (in seconds) since the last Update</param>
        </member>
        <member name="P:DPSF.Animations.CurrentAnimationID">
            <summary>
            Get / Set the Current Animation being used. The Animation is started at its beginning.
            <para>NOTE: If an invalid Animiation ID is given when Setting, the Animation will not be changed.</para>
            <para>NOTE: If an Animation has not beeng set yet when Getting, -1 is returned.</para>
            </summary>
        </member>
        <member name="P:DPSF.Animations.CurrentAnimationsPictureRotationTime">
            <summary>
            Get / Set how much Time should elapsed before switching frames in the Current Animation. 
            <para>NOTE: If no Animation has been set yet, zero will be returned.</para>
            </summary>
        </member>
        <member name="P:DPSF.Animations.CurrentAnimationsPictureRotationOrderIndex">
            <summary>
            Get / Set the Current Index in the Current Animation's Picture Rotation Order. 
            <para>NOTE: If no Animation has been set yet, Get returns -1, and Set doesn't change anything 
            (as well as if the specified Index is invalid).</para>
            </summary>
        </member>
        <member name="P:DPSF.Animations.CurrentAnimationsNumberOfTimesToPlay">
            <summary>
            Get / Set the Number of times the Current Animation should Play
            (it replays when the end of the Animation is reached). 
            Specify a value of zero to have the Animation repeat forever.
            <para>NOTE: If no Animation has been set yet, no changes are made when
            Setting, and -1 is returned when Getting.</para>
            </summary>
        </member>
        <member name="P:DPSF.Animations.CurrentAnimationsNumberOfTimesPlayed">
            <summary>
            Get / Set the Number of times the Current Animation has Played already.
            <para>NOTE: If no Animation has been set yet, Get returns -1, and Set doesn't change anything.</para>
            </summary>
        </member>
        <member name="P:DPSF.Animations.CurrentAnimationIsDonePlaying">
            <summary>
            Get if the Current Animation is Done Playing or not (i.e. Its Number Of Times Played is
            greater than or equal to its Number Of Times To Play). Returns true even if no
            Animation has been set to Play yet.
            </summary>
        </member>
        <member name="P:DPSF.Animations.TimeRequiredToPlayCurrentAnimation">
            <summary>
            Gets the amount of Time (in seconds) required to play the Current Animation.
            <para>NOTE: If no Animation has been played yet, zero is returned.</para>
            </summary>
        </member>
        <member name="P:DPSF.Animations.TimeRequiredToPlayTheRestOfTheCurrentAnimation">
            <summary>
            Gets the amount of Time (in seconds) required to play the remainder of the Current Animation.
            <para>NOTE: If no Animation has been played yet, zero is returned.</para>
            </summary>
        </member>
        <member name="P:DPSF.Animations.CurrentPicturesTextureCoordinates">
            <summary>
            Get the Rectangle representing the Texture Coordinates of the Picture 
            in the Animation that should be displayed at this point in time
            </summary>
        </member>
        <member name="P:DPSF.Animations.Paused">
            <summary>
            Get / Set if the Animation should be Paused or not. If Paused, the Animation will
            not be Updated.
            </summary>
        </member>
        <member name="P:DPSF.Animations.CurrentAnimationIsValid">
            <summary>
            Get if the Current Animation has been set yet or not
            </summary>
        </member>
        <member name="T:DPSF.Animations.SPicture">
            <summary>
            Structure to store an individual Picture's position and dimensions within a texture
            </summary>
        </member>
        <member name="M:DPSF.Animations.SPicture.#ctor(System.Int32,Microsoft.Xna.Framework.Rectangle)">
            <summary>
            Explicit constructor
            </summary>
            <param name="iID">The ID of this Picture (this should be unique)</param>
            <param name="sTextureCoordinates">The top-left (x,y) position and (width,height) dimensions
            of the Picture within the texture</param>
        </member>
        <member name="T:DPSF.Animations.Animation">
            <summary>
            Class to hold a single Animation's (i.e. Walking, Running, Jumping, etc) sequence of 
            Pictures and how long to display each Picture in the Animation for
            </summary>
        </member>
        <member name="M:DPSF.Animations.Animation.#ctor(System.Int32,System.Collections.Generic.List{System.Int32},System.Single,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="iID">The ID of this Animation (this should be unique)</param>
            <param name="cPictureRotationOrder">A List of Picture ID's which tell the sequence of 
            Pictures that make up the Animation</param>
            <param name="fPictureRotationTime">How long (in seconds) to wait before switching to the
            next Picture in the Picture Rotation Order</param>
            <param name="iNumberOfTimesToPlay">The Number of Times the Animation should Play before stopping. A value
            of zero means the Animation should repeat forever.</param>
        </member>
        <member name="M:DPSF.Animations.Animation.MoveToNextPictureInAnimation">
            <summary>
            Moves the Current Picture Index to the next element in the Picture Rotation Order, and loops
            if it reaches the end of the Animation
            </summary>
        </member>
        <member name="P:DPSF.Animations.Animation.CurrentPicturesID">
            <summary>
            Returns the Picture ID of the Current Picture being displayed.
            </summary>
        </member>
        <member name="P:DPSF.Animations.Animation.AnimationHasEnded">
            <summary>
            Get if the Animation has finished Playing or not.
            NOTE: Animations with Number Of Times To Play == 0 will never end
            </summary>
        </member>
        <member name="T:DPSF.DefaultParticleSystemMagnet">
            <summary>
            The base class that all Magnet classes inherit from. This class cannot be instantiated directly.
            A Magnet of a Particle System has an affect on its Particles, such as attracting or repelling them.
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.Mode">
            <summary>
            The current Mode that the Magnet is in
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.DistanceFunction">
            <summary>
            The Function to use to determine how much a Particle should be affected by 
            the Magnet based on how far away from the Magnet it is
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.meMagnetType">
            <summary>
            Holds the Type of Magnet this is
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MinDistance">
            <summary>
            The Min Distance that the Magnet should be able to affect Particles at. If the
            Particle is closer to the Magnet than this distance, the Magnet will not affect
            the Particle.
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MaxDistance">
            <summary>
            The Max Distance that the Magnet should be able to affect Particles at. If the
            Particle is further away from the Magnet tan this distance, the Manget will not
            affect the Particle.
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MaxForce">
            <summary>
            The Max Force that the Magnet is able to exert on a Particle
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.UserDefinedMagnetType">
            <summary>
            The Type of User-Defined Magnet this is. User-defined Magnet classes will all have a 
            MagnetType = MagnetTypes.UserDefined, so this field can be used to distinguish between 
            different user-defined Magnet classes.
            This may be used in conjunction with the "Other" Magnet Mode to distinguish which type of 
            custom user effect the Magnet should have on the Particles.
            </summary>
        </member>
        <member name="M:DPSF.DefaultParticleSystemMagnet.#ctor(DPSF.DefaultParticleSystemMagnet.MagnetModes,DPSF.DefaultParticleSystemMagnet.DistanceFunctions,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="eMode">The Mode that the Magnet should be in</param>
            <param name="eDistanceFunction">The Function to use to determine how much a Particle should be affected by 
            the Magnet based on how far away from the Magnet it is</param>
            <param name="fMinDistance">The Min Distance that the Magnet should be able to affect Particles at. If the
            Particle is closer to the Magnet than this distance, the Magnet will not affect the Particle.</param>
            <param name="fMaxDistance">The Max Distance that the Magnet should be able to affect Particles at. If the
            Particle is further away from the Magnet tan this distance, the Manget will not affect the Particle.</param>
            <param name="fMaxForce">The Max Force that the Magnet is able to exert on a Particle</param>
            <param name="iType">The Type of Magnet this is. This may be used in conjunction with the "Other" Magnet
            Mode to distinguish which type of custom user effect the Magnet should have on the Particles.</param>
        </member>
        <member name="M:DPSF.DefaultParticleSystemMagnet.#ctor(DPSF.DefaultParticleSystemMagnet)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cMagnetToCopy">The Magnet to copy from</param>
        </member>
        <member name="M:DPSF.DefaultParticleSystemMagnet.CopyFrom(DPSF.DefaultParticleSystemMagnet)">
            <summary>
            Copies the given Magnet's data into this Magnet's data
            </summary>
            <param name="cMagnetToCopy">The Magnet to copy from</param>
        </member>
        <member name="P:DPSF.DefaultParticleSystemMagnet.MagnetType">
            <summary>
            Gets what Type of Magnet this is
            </summary>
        </member>
        <member name="P:DPSF.DefaultParticleSystemMagnet.ID">
            <summary>
            Get the unique ID of this Magnet
            </summary>
        </member>
        <member name="T:DPSF.DefaultParticleSystemMagnet.MagnetModes">
            <summary>
            The Modes that the Magnet can be in
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MagnetModes.Attract">
            <summary>
            Attract Particles to the Magnet
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MagnetModes.Repel">
            <summary>
            Repel Particles from the Magnet
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MagnetModes.Other">
            <summary>
            Have some other custom effect on the Particles
            </summary>
        </member>
        <member name="T:DPSF.DefaultParticleSystemMagnet.DistanceFunctions">
            <summary>
            How much the Magnet should affect the Particles based on the Magnet's
            Max Distance and Strength
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.DistanceFunctions.Constant">
            <summary>
            As long as the Particle's distance from the Magnet is between the Min and Max Distance of 
            the Magnet, the Max Force will be applied to the Particle.
            <para>Function Logic: y = 1, where y is the normalized Force applied and 1 is the Particle's
            normalized distance between the Magnet's Min and Max Distances.</para>
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.DistanceFunctions.Linear">
            <summary>
            The Force applied to the Particle will be Linearly interpolated from zero to Max Force
            based on the Particle's distance from the Magnet between the Magnet's Min and Max Distances. 
            So when the Particle is at the Min Distance from the Magnet no force will be applied, when 
            the Particle is at half of the Max Distance from the Magnet 1/2 of the Max Force will be 
            applied, and when the Particle is at the Max Distance from the Magnet the Max Force will be 
            applied to the Particle.
            <para>Function Logic: y = x, where y is the normalized Force applied and x is the Particle's 
            normalized distance between the Magnet's Min and Max Distances.</para>
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.DistanceFunctions.Squared">
            <summary>
            The Force applied to the Particle will be Squared interpolated from zero to Max Force
            based on the Particle's distance from the Magnet between the Magnet's Min and Max Distances. 
            So when the Particle is at the Min Distance from the Magnet no force will be applied, when 
            the Particle is at half of the Max Distance from the Magnet 1/4 of the Max Force will be 
            applied, and when the Particle is at the Max Distance from the Magnet the Max Force will be 
            applied to the Particle.
            <para>Function Logic: y = x * x, where y is the normalized Force applied and x is the Particle's
            normalized distance between the Magnet's Min and Max Distances.</para>
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.DistanceFunctions.Cubed">
            <summary>
            The Force applied to the Particle will be Cubed interpolated from zero to Max Force
            based on the Particle's distance from the Magnet between the Magnet's Min and Max Distances.
            So when the Particle is at the Min Distance from the Magnet no force will be applied, when 
            the Particle is at half of the Max Distance from the Manget 1/8 of the Max Force will be 
            applied, and when the Particle is at the Max Distance from the Magnet the Max Force will be 
            applied to the Particle.
            <para>Function Logic: y = x * x * x, where y is the normalized Force applied and x is the Particle's
            normalized distance between the Magnet's Min and Max Distances.</para>
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.DistanceFunctions.LinearInverse">
            <summary>
            The Inverse of the Linear function. That is, when the Particle is at the Min Distance from
            the Magnet the Max Force will be applied, when the Particle is at half of the Max Distance
            from the Magnet 1/2 of the Max Force will be applied, and when the Particle is at the Max Distance
            from the Magnet no force will be applied to the Particle.
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.DistanceFunctions.SquaredInverse">
            <summary>
            The Inverse of the Squared function. That is, when the Particle is at the Min Distance from
            the Magnet the Max Force will be applied, when the Particle is at half of the Max Distance
            from the Magnet 1/4 of the Max Force will be applied, and when the Particle is at the Max Distance
            from the Magnet no force will be applied to the Particle.
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.DistanceFunctions.CubedInverse">
            <summary>
            The Inverse of the Cubed function. That is, when the Particle is at the Min Distance from
            the Magnet the Max Force will be applied, when the Particle is at half of the Max Distance
            from the Magnet 1/8 of the Max Force will be applied, and when the Particle is at the Max Distance
            from the Magnet no force will be applied to the Particle.
            </summary>
        </member>
        <member name="T:DPSF.DefaultParticleSystemMagnet.MagnetTypes">
            <summary>
            The Types of Magnets available to choose from (i.e. which Magnet class is being used)
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MagnetTypes.UserDefinedMagnet">
            <summary>
            User-Defined Magnet Type (i.e. an instance of a user-defined Magnet class, not a Magnet class provided by DPSF)
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MagnetTypes.PointMagnet">
            <summary>
            Point Magnet (i.e. an instance of the MagnetPoint class)
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MagnetTypes.LineMagnet">
            <summary>
            Line Magnet (i.e. an instance of the MagnetLine class)
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MagnetTypes.LineSegmentMagnet">
            <summary>
            Line Segment Magnet (i.e. an instance of the MagnetLineSegment class)
            </summary>
        </member>
        <member name="F:DPSF.DefaultParticleSystemMagnet.MagnetTypes.PlaneMagnet">
            <summary>
            Plane Magnet (i.e. an instance of the PlaneMagnet class)
            </summary>
        </member>
        <member name="T:DPSF.MagnetPoint">
            <summary>
            Magnet that attracts particles to/from a single point in 3D space
            </summary>
        </member>
        <member name="F:DPSF.MagnetPoint.PositionData">
            <summary>
            The Position, Velocity, and Acceleration of the Magnet
            </summary>
        </member>
        <member name="M:DPSF.MagnetPoint.#ctor(Microsoft.Xna.Framework.Vector3,DPSF.DefaultParticleSystemMagnet.MagnetModes,DPSF.DefaultParticleSystemMagnet.DistanceFunctions,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="sPosition">The 3D Position of the Magnet</param>
            <param name="eMode">The Mode that the Magnet should be in</param>
            <param name="eDistanceFunction">The Function to use to determine how much a Particle should be affected by 
            the Magnet based on how far away from the Magnet it is</param>
            <param name="fMinDistance">The Min Distance that the Magnet should be able to affect Particles at. If the
            Particle is closer to the Magnet than this distance, the Magnet will not affect the Particle.</param>
            <param name="fMaxDistance">The Max Distance that the Magnet should be able to affect Particles at. If the
            Particle is further away from the Magnet tan this distance, the Manget will not affect the Particle.</param>
            <param name="fMaxForce">The Max Force that the Magnet is able to exert on a Particle</param>
            <param name="iType">The Type of Magnet this is. This may be used in conjunction with the "Other" Magnet
            Mode to distinguish which type of custom user effect the Magnet should have on the Particles.</param>
        </member>
        <member name="M:DPSF.MagnetPoint.#ctor(DPSF.Position3D,DPSF.DefaultParticleSystemMagnet.MagnetModes,DPSF.DefaultParticleSystemMagnet.DistanceFunctions,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="cPositionData">The 3D Position, Velocity, and Acceleration of the Magnet</param>
            <param name="eMode">The Mode that the Magnet should be in</param>
            <param name="eDistanceFunction">The Function to use to determine how much a Particle should be affected by 
            the Magnet based on how far away from the Magnet it is</param>
            <param name="fMinDistance">The Min Distance that the Magnet should be able to affect Particles at. If the
            Particle is closer to the Magnet than this distance, the Magnet will not affect the Particle.</param>
            <param name="fMaxDistance">The Max Distance that the Magnet should be able to affect Particles at. If the
            Particle is further away from the Magnet tan this distance, the Manget will not affect the Particle.</param>
            <param name="fMaxForce">The Max Force that the Magnet is able to exert on a Particle</param>
            <param name="iType">The Type of Magnet this is. This may be used in conjunction with the "Other" Magnet
            Mode to distinguish which type of custom user effect the Magnet should have on the Particles.</param>
        </member>
        <member name="M:DPSF.MagnetPoint.#ctor(DPSF.MagnetPoint)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cMagnetToCopy">The Point Magnet to copy from</param>
        </member>
        <member name="M:DPSF.MagnetPoint.CopyFrom(DPSF.MagnetPoint)">
            <summary>
            Copies the given Point Magnet's data into this Point Magnet's data
            </summary>
            <param name="cMagnetToCopy">The Point Magnet to copy from</param>
        </member>
        <member name="T:DPSF.MagnetLine">
            <summary>
            Magnet that attracts particles to/from an infinite line in 3D space
            </summary>
        </member>
        <member name="F:DPSF.MagnetLine.msDirection">
            <summary>
            The Direction that the Line points in
            </summary>
        </member>
        <member name="M:DPSF.MagnetLine.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,DPSF.DefaultParticleSystemMagnet.MagnetModes,DPSF.DefaultParticleSystemMagnet.DistanceFunctions,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="sPositionOnLine">A 3D Position that the Line Magnet passes through</param>
            <param name="sDirection">The Direction that the Line points in</param>
            <param name="eMode">The Mode that the Magnet should be in</param>
            <param name="eDistanceFunction">The Function to use to determine how much a Particle should be affected by 
            the Magnet based on how far away from the Magnet it is</param>
            <param name="fMinDistance">The Min Distance that the Magnet should be able to affect Particles at. If the
            Particle is closer to the Magnet than this distance, the Magnet will not affect the Particle.</param>
            <param name="fMaxDistance">The Max Distance that the Magnet should be able to affect Particles at. If the
            Particle is further away from the Magnet tan this distance, the Manget will not affect the Particle.</param>
            <param name="fMaxForce">The Max Force that the Magnet is able to exert on a Particle</param>
            <param name="iType">The Type of Magnet this is. This may be used in conjunction with the "Other" Magnet
            Mode to distinguish which type of custom user effect the Magnet should have on the Particles.</param>
        </member>
        <member name="M:DPSF.MagnetLine.#ctor(DPSF.MagnetLine)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cMagnetToCopy">The Line Magnet to copy from</param>
        </member>
        <member name="M:DPSF.MagnetLine.CopyFrom(DPSF.MagnetLine)">
            <summary>
            Copies the given Line Magnet's data into this Line Magnet's data
            </summary>
            <param name="cMagnetToCopy">The Line Magnet to copy from</param>
        </member>
        <member name="M:DPSF.MagnetLine.SetDirection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Sets the Direction of the Line by specifying 2 points in 3D space that are on the Line.
            <para>NOTE: The 2 points cannot be the same.</para>
            </summary>
            <param name="sFirstPointOnTheLine">The first point that falls on the Line</param>
            <param name="sSecondPointOnTheLine">The second point that falls on the Line</param>
        </member>
        <member name="P:DPSF.MagnetLine.PositionOnLine">
            <summary>
            A 3D point that the Line passes through
            </summary>
        </member>
        <member name="P:DPSF.MagnetLine.Direction">
            <summary>
            The direction that the Line points in. This direction, along with the opposite (i.e. negative) of 
            this direction form the line, since a line has infinite length. This value is 
            automatically normalized when it is set.
            </summary>
        </member>
        <member name="T:DPSF.MagnetLineSegment">
            <summary>
            Magnet that attracts particles to/from a line with specified end points in 3D space
            </summary>
        </member>
        <member name="M:DPSF.MagnetLineSegment.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,DPSF.DefaultParticleSystemMagnet.MagnetModes,DPSF.DefaultParticleSystemMagnet.DistanceFunctions,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="sEndPoint1Position">The 3D position of the first End Point of the Line Segment Magnet</param>
            <param name="sEndPoint2Position">The 3D position of the second End Point of the Line Segment Magnet</param>
            <param name="eMode">The Mode that the Magnet should be in</param>
            <param name="eDistanceFunction">The Function to use to determine how much a Particle should be affected by 
            the Magnet based on how far away from the Magnet it is</param>
            <param name="fMinDistance">The Min Distance that the Magnet should be able to affect Particles at. If the
            Particle is closer to the Magnet than this distance, the Magnet will not affect the Particle.</param>
            <param name="fMaxDistance">The Max Distance that the Magnet should be able to affect Particles at. If the
            Particle is further away from the Magnet tan this distance, the Manget will not affect the Particle.</param>
            <param name="fMaxForce">The Max Force that the Magnet is able to exert on a Particle</param>
            <param name="iType">The Type of Magnet this is. This may be used in conjunction with the "Other" Magnet
            Mode to distinguish which type of custom user effect the Magnet should have on the Particles.</param>
        </member>
        <member name="M:DPSF.MagnetLineSegment.#ctor(DPSF.MagnetLineSegment)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cMagnetToCopy">The Line Segment Magnet to copy from</param>
        </member>
        <member name="M:DPSF.MagnetLineSegment.CopyFrom(DPSF.MagnetLineSegment)">
            <summary>
            Copies the given Line Segment Magnet's data into this Line Segment Magnet's data
            </summary>
            <param name="cMagnetToCopy">The Line Magnet to copy from</param>
        </member>
        <member name="P:DPSF.MagnetLineSegment.EndPoint1">
            <summary>
            The position of the first End Point
            </summary>
        </member>
        <member name="P:DPSF.MagnetLineSegment.EndPoint2">
            <summary>
            The position of the second End Point
            </summary>
        </member>
        <member name="T:DPSF.MagnetPlane">
            <summary>
            Magnet that attracts particles to/from a plane in 3D space
            </summary>
        </member>
        <member name="F:DPSF.MagnetPlane.msNormal">
            <summary>
            The Normal direction of the Plane
            </summary>
        </member>
        <member name="M:DPSF.MagnetPlane.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,DPSF.DefaultParticleSystemMagnet.MagnetModes,DPSF.DefaultParticleSystemMagnet.DistanceFunctions,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Explicit Constructor
            </summary>
            <param name="sPositionOnPlane">A 3D Position on the Plane Magnet's Plane</param>
            <param name="sNormal">The Normal direction of the Plane (i.e. the up direction away from the plane)</param>
            <param name="eMode">The Mode that the Magnet should be in</param>
            <param name="eDistanceFunction">The Function to use to determine how much a Particle should be affected by 
            the Magnet based on how far away from the Magnet it is</param>
            <param name="fMinDistance">The Min Distance that the Magnet should be able to affect Particles at. If the
            Particle is closer to the Magnet than this distance, the Magnet will not affect the Particle.</param>
            <param name="fMaxDistance">The Max Distance that the Magnet should be able to affect Particles at. If the
            Particle is further away from the Magnet tan this distance, the Manget will not affect the Particle.</param>
            <param name="fMaxForce">The Max Force that the Magnet is able to exert on a Particle</param>
            <param name="iType">The Type of Magnet this is. This may be used in conjunction with the "Other" Magnet
            Mode to distinguish which type of custom user effect the Magnet should have on the Particles.</param>
        </member>
        <member name="M:DPSF.MagnetPlane.#ctor(DPSF.MagnetPlane)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cMagnetToCopy">The Plane Magnet to copy from</param>
        </member>
        <member name="M:DPSF.MagnetPlane.CopyFrom(DPSF.MagnetPlane)">
            <summary>
            Copies the given Plane Magnet's data into this Plane Magnet's data
            </summary>
            <param name="cMagnetToCopy">The Plane Magnet to copy from</param>
        </member>
        <member name="P:DPSF.MagnetPlane.PositionOnPlane">
            <summary>
            A 3D point on the Plane
            </summary>
        </member>
        <member name="P:DPSF.MagnetPlane.Normal">
            <summary>
            The Normal direction of the Plane (i.e. the up direction away from the plane). This value is 
            automatically normalized when it is set.
            </summary>
        </member>
        <member name="T:DPSF.DefaultQuadParticleSystem">
            <summary>
            The Default Quad Particle System to inherit from, which uses Default Quad Particles
            </summary>
        </member>
        <member name="M:DPSF.DefaultQuadParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultQuadParticleVertex">
            <summary>
            Structure used to hold a Default Quad Particle's Vertex's properties used for drawing.
            This contains a Vector3 Position and a Color Color.
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticleVertex.Position">
            <summary>
            The Position of the vertex in 3D space. The position of this vertex
            relative to the quads other three vertices determines the Particle's orientation.
            </summary>
        </member>
        <member name="F:DPSF.DefaultQuadParticleVertex.Color">
            <summary>
            The Color of the vertex
            </summary>
        </member>
        <member name="P:DPSF.DefaultQuadParticleVertex.VertexElements">
            <summary>
            An array describing the attributes of each Vertex
            </summary>
        </member>
        <member name="P:DPSF.DefaultQuadParticleVertex.SizeInBytes">
            <summary>
            The Size of one Vertex in Bytes
            </summary>
        </member>
        <member name="T:DPSF.DefaultNoDisplayParticleSystem">
            <summary>
            The Default No Display Particle System to inherit from, which uses Default Pixel Particles
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultNoDisplayParticleSystem`2">
            <summary>
            The Default No Display Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="M:DPSF.DPSFDefaultNoDisplayParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DefaultNoDisplayParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultNoDisplayParticle">
            <summary>
            Particle used by the No Display Particle System
            </summary>
        </member>
        <member name="T:DPSF.DefaultNoDisplayParticleVertex">
            <summary>
            Dummy structure used for the vertices of a No Display particle system.
            Since the particles are not drawn, they do not have vertices, so this structure is empty.
            </summary>
        </member>
        <member name="P:DPSF.DefaultNoDisplayParticleVertex.VertexElements">
            <summary>
            An array describing the attributes of each Vertex
            </summary>
        </member>
        <member name="P:DPSF.DefaultNoDisplayParticleVertex.SizeInBytes">
            <summary>
            The Size of one Vertex in Bytes
            </summary>
        </member>
        <member name="T:DPSF.AutoMemoryManagerModes">
            <summary>
            The possible Modes the Automatic Memory Manager can be in
            </summary>
        </member>
        <member name="F:DPSF.AutoMemoryManagerModes.Disabled">
            <summary>
            Do not use the Automatic Memory Manager. The Number Of Particles Allocated In Memory will not be changed dynamically at run-time.
            This is the best option if performance is critical, as it can be expensive to allocate and release large chunks of memory at 
            run-time. If using this mode you should be sure that the Number Of Particles Allocated In Memory is large enough to accommodate 
            the particle system, but small enough that it does not waste large amounts of memory.
            </summary>
        </member>
        <member name="F:DPSF.AutoMemoryManagerModes.IncreaseAndDecrease">
            <summary>
            Allow the Automatic Memory Manager to allocate more memory when needed, and reduce it when not needed.
            </summary>
        </member>
        <member name="F:DPSF.AutoMemoryManagerModes.IncreaseOnly">
            <summary>
            Only allow the Automatic Memory Manager to allocate more memory when needed (cannot reduce space).
            </summary>
        </member>
        <member name="F:DPSF.AutoMemoryManagerModes.DecreaseOnly">
            <summary>
            Only allow the Automatic Memory Manager to reduce the amount of memory allocated when it is not needed (cannot increase space).
            </summary>
        </member>
        <member name="T:DPSF.AutoMemoryManagerSettings">
            <summary>
            Class to hold the Automatic Memory Manager Settings
            </summary>
        </member>
        <member name="F:DPSF.AutoMemoryManagerSettings.MemoryManagementMode">
            <summary>
            The Memory Management Mode being used.
            <para>NOTE: Default value is AutoMemoryManagerModes.IncreaseAndDecrease.</para>
            </summary>
        </member>
        <member name="M:DPSF.AutoMemoryManagerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DPSF.AutoMemoryManagerSettings"/> class.
            </summary>
        </member>
        <member name="M:DPSF.AutoMemoryManagerSettings.#ctor(DPSF.AutoMemoryManagerSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:DPSF.AutoMemoryManagerSettings"/> class, copying all of the settings from the given Settings To Copy.
            </summary>
            <param name="settingsToCopy">The settings to copy from.</param>
        </member>
        <member name="M:DPSF.AutoMemoryManagerSettings.CopyFrom(DPSF.AutoMemoryManagerSettings)">
            <summary>
            Copies the given Auto Memory Manager Settings into this instance.
            </summary>
            <param name="settingsToCopy">The settings to copy from.</param>
        </member>
        <member name="P:DPSF.AutoMemoryManagerSettings.AbsoluteMinNumberOfParticles">
            <summary>
            The Absolute Minimum Number Of Particles this Particle System has to have memory allocated for.
            The Automatic Memory Manager will never allocate space for fewer Particles than this.
            <para>NOTE: This value must be greater than zero.</para>
            <para>NOTE: Default value is 10.</para>
            </summary>
        </member>
        <member name="P:DPSF.AutoMemoryManagerSettings.ReduceAmount">
            <summary>
            The Automatic Memory Manager keeps track of the Max Particles that were Active in a single
            frame over the last X seconds (call this number M). If the Max Number Of Particles is greater
            than M, the Automatic Memory Manager can de-allocate unused memory. The Reduce Amount determines
            how much more memory than M to allocate. For example, setting the Reduce Amount to 1.0 would set
            the Max Number Of Particles to M. Setting the Reduce Amount to 1.1 would set the Max Number Of
            Particles to M + 10%. Setting it to 2.0 would set the Max Number Of Particles to M + 100% (i.e. M * 2).
            <para>NOTE: This value is clamped to the range 1.0 - 2.0.</para>
            <para>NOTE: The Automatic Memory Manager will never reduce the amount of memory to be less than
            what is required for the Absolute Min Number Of Particles.</para>
            <para>NOTE: Default value is 1.1.</para>
            </summary>
        </member>
        <member name="P:DPSF.AutoMemoryManagerSettings.IncreaseAmount">
            <summary>
            The amount the Automatic Memory Manager increases the memory allocated for Particles by.
            When adding a new Particle, if we discover that the Number Of Active Particles has reached
            the Max Number Of Particles, the Automatic Memory Manager will increase the Max Number Of
            Particles by the Increase Amount. For example, if the Increase Amount is set to 2.0, then 
            the Max Number Of Particles will be doubled (200%). If it is set to 3.0 it will be tripled 
            (300%). If it is set to 0.5, the Max Number Of Particles will be increased to 150%.
            <para>NOTE: This value is clamped to the range 1.01 - 10.0 (i.e. 101% - 1000%).</para>
            <para>NOTE: The Automatic Memory Manager will never increase the amount of memory to be more than
            what is required by the Absolute Max Number Of Particles.</para>
            <para>NOTE: Default value is 2.0.</para>
            </summary>
        </member>
        <member name="P:DPSF.AutoMemoryManagerSettings.SecondsMaxNumberOfParticlesMustExistForBeforeReducingSize">
            <summary>
            The Automatic Memory Manager keeps track of the Max Particles that were Active in a single
            frame over the last X seconds (call this number M). If the Max Number Of Particles is greater
            than M, the Automatic Memory Manager can de-allocate unused memory. The Seconds Max Number Of 
            Particles Must Exist For Before Reducing Size tells how long M must be unchanged for before
            the Automatic Memory Manager can reduce the amount of allocated memory.
            <para>NOTE: This value must be greater than zero.</para>
            <para>NOTE: Default value is 3.0.</para>
            </summary>
        </member>
        <member name="T:DPSF.DPSFHelper">
            <summary>
            Collection of static functions for performing common operations
            </summary>
        </member>
        <member name="M:DPSF.DPSFHelper.#cctor">
            <summary>
            Initializes the <see cref="T:DPSF.DPSFHelper"/> class.
            This constructor cannot be explicitly called. It will be called the first time this class is accessed.
            </summary>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomNumberBetween(System.Single,System.Single)">
            <summary>
            Returns a random number between the specified values
            </summary>
            <param name="fValue1">The first value</param>
            <param name="fValue2">The second value</param>
            <returns>Returns a random number between the specified values</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.FadeInQuicklyAndFadeOutSlowlyBasedOnLifetime(System.Single)">
            <summary>
            Returns how transparent a Particle should be, based on it's Normalized Elapsed Time, so that it
            fades in quickly and fades out slowly.
            </summary>
            <param name="fNormalizedElapsedTime">The current Normalized Elapsed Time (0.0 - 1.0) of a Particle</param>
            <returns>Returns the Alpha Color component that should be used for the Particle</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.FadeInQuicklyAndFadeOutQuicklyBasedOnLifetime(System.Single)">
            <summary>
            Returns how transparent a Particle should be, based on it's Normalized Elapsed Time, so that it
            fades in quickly and fades out quickly.
            </summary>
            <param name="fNormalizedElapsedTime">The current Normalized Elapsed Time (0.0 - 1.0) of a Particle</param>
            <returns>Returns the Alpha Color component that should be used for the Particle</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.InterpolationAmountForEqualLerpInAndLerpOut(System.Single)">
            <summary>
            Returns the interpolation amount (between 0.0 and 1.0) that should be used in a Lerp function to have a 
            property reach its full value when the NormalizedLifetime reaches 0.5, and go back to its original value 
            by the time the NormalizedLifetime reaches 1.0.
            <para>An example of where to use this would be if you wanted a particle to start off small, and reach
            its full size when the particle's lifetime is half over, and then to shrink back to being small by the
            time the particle dies. You would use the value returned by this function as the interpolation amount
            for the Lerp function. e.g. MathHelper.Lerp(SmallSize, LargeSize, ValueReturnedByThisFunction).</para>
            </summary>
            <param name="fNormalizedElapsedTime">The current Normalized Elapsed Time (0.0 - 1.0) of a Particle</param>
            <returns>Returns the interpolation amount (between 0.0 and 1.0) that should be used in a Lerp function to have a 
            property reach its full value when the NormalizedLifetime reaches 0.5, and go back to its original value 
            by the time the NormalizedLifetime reaches 1.0.</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomNormalizedVector">
            <summary>
            Returns a vector with a Random direction that has been Normalized.
            </summary>
            <returns>Returns a vector with a Random direction that has been Normalized.</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.SourceToTargetVector(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a vector representing the line from the source point to the target point.
            </summary>
            <param name="source">The source position.</param>
            <param name="target">The target position.</param>
            <returns>Returns a vector representing the line from the source point to the target point.</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.SourceToTargetDirection(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a normalized vector representing the direction that points from the source point to the target point.
            </summary>
            <param name="source">The source position.</param>
            <param name="target">The target position.</param>
            <returns>Returns a normalized vector representing the direction that points from the source point to the target point.</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomVectorBetweenTwoVectors(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a Vector whose individual XYZ components are each randomly chosen to be somewhere 
            between the two given Vectors' individual XYZ components. Unlike choosing a random Lerp value
            between two vectors, which would give a point somewhere on the LINE between the two points, this
            chooses a random Lerp value between each of the two vectors individual xyz components, returning
            a point somewhere in the cube-shaped AREA (i.e. Volume) between the two points.
            </summary>
            <param name="sVector1">The first Vector</param>
            <param name="sVector2">The second Vector</param>
            <returns>Returns a Vector whose individual XYZ components are each randomly chosen to be somewhere 
            between the two given Vectors' individual XYZ components.</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomColor">
            <summary>
            Returns a random opaque Color (i.e. no transparency)
            </summary>
            <returns>Returns a random opaque Color (i.e. no transparency)</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomColorWithRandomTransparency">
            <summary>
            Returns a random Color with a random alpha value as well (i.e. random transparency)
            </summary>
            <returns>Returns a random Color with a random alpha value as well (i.e. random transparency)</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.LerpColor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single)">
            <summary>
            Returns the linearly interpolated Color between Color 1 and Color 2
            </summary>
            <param name="sColor1">The Color value used with InterpolationAmount 0.0</param>
            <param name="sColor2">The Color value used with InterpolationAmount 1.0</param>
            <param name="fInterpolationAmount">A value between 0.0 and 1.0 indicating how 
            much to interpolate the RGBA values between Color 1 and Color 2</param>
            <returns>Returns the interpolated Color</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.LerpColor(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Returns the linearly interpolated Color between Color 1 and Color 2
            </summary>
            <param name="sColor1">The Color value used with InterpolationAmount 0.0</param>
            <param name="sColor2">The Color value used with InterpolationAmount 1.0</param>
            <param name="fRInterpolationAmount">A value between 0.0 and 1.0 indicating how 
            much to interpolate the Red value between Color 1 and Color 2</param>
            <param name="fGInterpolationAmount">A value between 0.0 and 1.0 indicating how 
            much to interpolate the Green value between Color 1 and Color 2</param>
            <param name="fBInterpolationAmount">A value between 0.0 and 1.0 indicating how 
            much to interpolate the Blue value between Color 1 and Color 2</param>
            <param name="fAInterpolationAmount">A value between 0.0 and 1.0 indicating how 
            much to interpolate the Alpha value between Color 1 and Color 2</param>
            <returns>Returns the interpolated Color</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.PointOnCircle(System.Single)">
            <summary>
            Returns a point on a circle with a radius of one, on the X-Y axis plane. 
            To use a different radius simply multiply the returned value by the desired radius value.
            </summary>
            <param name="fAngle">The angle on the circle in radians</param>
            <returns>Returns a 2D position on a circle</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.PointOnCircleVector3(System.Single)">
            <summary>
            Returns a point on a circle with a radius of one, on the X-Y axis plane (Z value of zero). 
            To use a different radius simply multiply the returned value by the desired radius value.
            </summary>
            <param name="fAngle">The angle on the circle in radians</param>
            <returns>Returns a 3D position on a circle</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomPointOnCircle">
            <summary>
            Returns a random point on a circle with a radius of one, on the X-Y axis plane. 
            To use a different radius simply multiply the returned value by the desired radius value.
            </summary>
            <returns>Returns a random 2D position on a circle</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomPointOnCircleVector3">
            <summary>
            Returns a random point on a circle with a radius of one, on the X-Y axis plane (Z value of zero). 
            To use a different radius simply multiply the returned value by the desired radius value.
            </summary>
            <returns>Returns a random 3D position on a circle, with a Z value of zero</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.NormalizedPointOnSphere(System.Single,System.Single)">
            <summary>
            Returns a point on a sphere with a radius of one.  To use a different radius simply 
            multiply the returned value by the desired radius value, before translating it
            to the sphere's position in world coordinates.  To create a circle simply use a
            constant value for one of the Angles while changing the other Angle.
            </summary>
            <param name="fYawAngle">Imagine a point on the surface of the sphere at the front 
            center of the sphere. This value will be how much to rotate that point around the 
            horizontal ring around the center of the sphere, in radians.</param>
            <param name="fPitchAngle">This value will be how much to rotate that point around 
            the vertical ring around the sphere, at the current position of the point, in radians.</param>
            <returns>Returns a point on a sphere with a radius of one</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomNormalizedPointOnSphere">
            <summary>
            Returns a random point on a sphere with a radius of one.  To use a different radius simply 
            multiply the returned value by the desired radius value, before translating it
            to the sphere's position in world coordinates.
            </summary>
            <returns>Returns a random point on a sphere with a radius of one</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.PointOnSphere(System.Single,System.Single,System.Single)">
            <summary>
            Returns a point on a sphere with the given Radius. To create a circle simply use a
            constant value for one of the Angles while changing the other Angle.
            </summary>
            <param name="fYawAngle">Imagine a point on the surface of the sphere at the front 
            center of the sphere. This value will be how much to rotate that point around the 
            horizontal ring around the center of the sphere, in radians.</param>
            <param name="fPitchAngle">This value will be how much to rotate that point around 
            the vertical ring around the sphere, at the current position of the point, in radians.</param>
            <param name="fRadius">The radius the sphere should have</param>
            <returns>Returns a point on a sphere with the given radius</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomPointOnSphere(System.Single)">
            <summary>
            Returns a random point on a sphere with the given Radius
            </summary>
            <param name="fRadius">The radius the sphere should have</param>
            <returns>Returns a random point on a sphere with the given Radius</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.PointOnSphere(System.Single,System.Single,System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a point on a sphere with the given Radius, at the specified Sphere Position.
            To create a circle simply use a constant value for one of the Angles while changing 
            the other Angle.
            </summary>
            <param name="fYawAngle">Imagine a point on the surface of the sphere at the front 
            center of the sphere. This value will be how much to rotate that point around the 
            horizontal ring around the center of the sphere, in radians.</param>
            <param name="fPitchAngle">This value will be how much to rotate that point around 
            the vertical ring around the sphere, at the current position of the point, in radians.</param>
            <param name="fRadius">The radius the sphere should have</param>
            <param name="sSpherePosition">The center position of the sphere in world coordinates</param>
            <returns>Returns a point on a sphere with the given Radius, at the specified Sphere Position</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.RandomPointOnSphere(System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns a random point on a sphere with the given Radius, at the specified Sphere Position
            </summary>
            <param name="fRadius">The radius the sphere should have</param>
            <param name="sSpherePosition">The center position of the sphere in world coordinates</param>
            <returns>Returns a random point on a sphere with the given Radius, at the specified Sphere Position</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.VectorsAreEqualWithinTolerance(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Returns true if the difference between the individual XYZ components of the
            given Vectors are all less than the specified Tolerance
            </summary>
            <param name="sVector1">The first Vector</param>
            <param name="sVector2">The second Vector</param>
            <param name="fTolerance">How much of a difference there may be between the individual
            XYZ components for them to be considered equal</param>
            <returns>Returns true if the difference between the individual XYZ components of the
            given Vectors are each less than the specified Tolerance</returns>
        </member>
        <member name="M:DPSF.DPSFHelper.VectorsAreTheSamePolarity(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns if the polarity (i.e. positive or negative) of each X,Y,Z component of the two vectors are the same or not.
            <para>Example: if Vector 1's X component is positive and Vector 2's X component is negative, this will return false.</para>
            <para>Example: if Vector 1's X,Y,Z components are all positive, and Vector 2's X,Y,Z components are all positive, this will return true.</para>
            </summary>
            <param name="sVector1">The first Vector.</param>
            <param name="sVector2">The second Vector.</param>
            <returns></returns>
        </member>
        <member name="M:DPSF.DPSFHelper.CloneBlendState(Microsoft.Xna.Framework.Graphics.BlendState)">
            <summary>
            Returns a clone of the given BlendState.
            Read-only properties, such as the GraphicsDevice property, are not copied though.
            </summary>
            <param name="blendStateToClone">The BlendState to clone.</param>
        </member>
        <member name="M:DPSF.DPSFHelper.CloneDepthStencilState(Microsoft.Xna.Framework.Graphics.DepthStencilState)">
            <summary>
            Returns a clone of the given DepthStencilState.
            Read-only properties, such as the GraphicsDevice property, are not copied though.
            </summary>
            <param name="depthStencilStateToClone">The DepthStencilState to clone.</param>
        </member>
        <member name="M:DPSF.DPSFHelper.CloneRasterizerState(Microsoft.Xna.Framework.Graphics.RasterizerState)">
            <summary>
            Returns a clone of the given RasterizerState.
            Read-only properties, such as the GraphicsDevice property, are not copied though.
            </summary>
            <param name="rasterizerStateToClone">The RasterizerState to clone.</param>
        </member>
        <member name="M:DPSF.DPSFHelper.CloneSamplerState(Microsoft.Xna.Framework.Graphics.SamplerState)">
            <summary>
            Returns a clone of the given SamplerState.
            Read-only properties, such as the GraphicsDevice property, are not copied though.
            </summary>
            <param name="samplerStateToClone">The SamplerState to clone.</param>
        </member>
        <member name="P:DPSF.DPSFHelper.Version">
            <summary>
            Return the version of the DPSF.dll being used. 
            This includes the Major, Minor, Build, and Revision numbers.
            </summary>
        </member>
        <member name="P:DPSF.DPSFHelper.DPSFInheritsDrawableGameComponent">
            <summary>
            Get if the Particle Systems are inheriting from DrawableGameComponent or not.
            <para>If inheriting from DrawableGameComponent, the Particle Systems
            are automatically added to the given Game object's Components and the
            Update() and Draw() functions are automatically called by the
            Game object when it updates and draws the rest of its Components.</para>
            <para>If the Update() and Draw() functions are called by the user anyways,
            they will exit without performing any operations, so it is suggested
            to include them anyways to make switching between inheriting and
            not inheriting from DrawableGameComponent seamless; just be aware
            that the updates and draws are actually being performed when the
            Game object is told to update and draw (i.e. when base.Update() and base.Draw()
            are called), not when the particle system functions are called.</para>
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultEffectTechniques">
            <summary>
            The Techniques provided by the DPSF Default Effect.
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultEffectTechniques.Sprites">
            <summary>
            The default technique used to display particles as sprites.
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultEffectTechniques.Quads">
            <summary>
            The default technique used to display particles as colored quads.
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultEffectTechniques.TexturedQuads">
            <summary>
            The default technique used to display particles as textured quads.
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultEffectTechniques.TexturedQuadsExperimental">
            <summary>
            An experimental technique used to display particles as textured quads, doing the color blending using premultiplied colors.
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultEffect">
            <summary>
            The Default Effect provided by DPSF.
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultEffect._configuration">
            <summary>
            Holds this effects configuration in case we need to clone it.
            </summary>
        </member>
        <member name="M:DPSF.DPSFDefaultEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,DPSF.DPSFDefaultEffect.DPSFDefaultEffectConfigurations)">
            <summary>
            Constructor
            </summary>
            <param name="graphicsDevice">The Graphics Device to load the effect with.</param>
            <param name="configuration">The effect configuration to load (i.e. Windows HiDef, Xbox 360 Reach, etc.)</param>
        </member>
        <member name="M:DPSF.DPSFDefaultEffect.#ctor(DPSF.DPSFDefaultEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:DPSF.DPSFDefaultEffect"/> class.
            </summary>
            <param name="effectToClone">The effect to clone.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultEffect.Clone">
            <summary>
            Creates and returns a clone of this DPSFDefaultEffect instance.
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultEffect.ColorBlendAmount">
            <summary>
            How much of the vertex Color should be blended in with the Texture's Color.
            <para>0.0 = use Texture's color, 1.0 = use specified color. Default is 0.5.</para>
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultEffect.Texture">
            <summary>
            The texture to use to draw the particles.
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultEffect.World">
            <summary>
            The World matrix.
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultEffect.View">
            <summary>
            The View matrix.
            </summary>
        </member>
        <member name="P:DPSF.DPSFDefaultEffect.Projection">
            <summary>
            The Projection matrix.
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultEffect.DPSFDefaultEffectConfigurations">
            <summary>
            The list of valid DPSF Default Effect configurations
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultEffect.DPSFDefaultEffectConfigurations.WindowsHiDef">
            <summary>
            Windows HiDef configuration.
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultEffect.DPSFDefaultEffectConfigurations.WindowsReach">
            <summary>
            Windows Reach configuration.
            </summary>
        </member>
        <member name="F:DPSF.DPSFDefaultEffect.DPSFDefaultEffectConfigurations.Xbox360HiDef">
            <summary>
            Xbox 360 HiDef configuration.
            </summary>
        </member>
        <member name="T:DPSF.DefaultAnimatedTexturedQuadParticleSystem">
            <summary>
            The Default Animated Textured Quad Particle System to inherit from, which uses Default Animated Textured Quad Particles
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultAnimatedTexturedQuadParticleSystem`2">
            <summary>
            The Default Animated Textured Quad Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedTexturedQuadParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedTexturedQuadParticleSystem`2.UpdateParticleAnimationAndTextureCoordinates(DPSF.DefaultAnimatedTexturedQuadParticle,System.Single)">
            <summary>
            Updates the Animation, as well as the Particle's Texture Coordinates to match the Animation
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedTexturedQuadParticleSystem`2.UpdateParticleToDieOnceAnimationFinishesPlaying(DPSF.DefaultAnimatedTexturedQuadParticle,System.Single)">
            <summary>
            Updates the Particle to be removed from the Particle System once the Animation finishes Playing
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DefaultAnimatedTexturedQuadParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultAnimatedTexturedQuadParticle">
            <summary>
            Particle used by the Default Animated Quad Particle System
            </summary>
        </member>
        <member name="F:DPSF.DefaultAnimatedTexturedQuadParticle.Animation">
            <summary>
            Class to hold this Particle's Animation information
            </summary>
        </member>
        <member name="M:DPSF.DefaultAnimatedTexturedQuadParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultAnimatedTexturedQuadParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="T:DPSF.ParticleTypes">
            <summary>
            The Type of Particles that the Particle Systems can draw. Different Particle Types are drawn in 
            different ways. For example, four vertices are required to draw a Quad, and only one is required 
            to draw a Point Sprite.
            </summary>
        </member>
        <member name="F:DPSF.ParticleTypes.None">
            <summary>
            This is the default settings when we don't know what Type of Particles are going to be used yet.
            A particle system is not considered Initialized until the Particle Type does not equal this.
            </summary>
        </member>
        <member name="F:DPSF.ParticleTypes.NoDisplay">
            <summary>
            Use this when you do not want to draw your particles to the screen, as no vertex buffer will be
            created, saving memory. Also, the Draw() function will do nothing when this Particle Type is used.
            This Particle Type is useful when you just want to collect and analyze particle information without
            visualizing the particles.
            </summary>
        </member>
        <member name="F:DPSF.ParticleTypes.Sprite">
            <summary>
            Texture in 2D screen coordinates. Drawn using a SpriteBatch object. Only allows for 2D roll
            rotations, always faces the camera, and must use a Texture.
            </summary>
        </member>
        <member name="F:DPSF.ParticleTypes.Quad">
            <summary>
            Four vertices in 3D world coordinates. Allows for rotations in all 3 dimensions, does
            not have to always face the camera, may be skewed into any quadrilateral, such as
            a square, rectangle, or trapezoid, and do not use a Texture.
            </summary>
        </member>
        <member name="F:DPSF.ParticleTypes.TexturedQuad">
            <summary>
            Four vertices in 3D world coordinates. Allows for rotations in all 3 dimensions, does
            not have to always face the camera, may be skewed into any quadrilateral, such as
            a square, rectangle, or trapezoid, and must use a Texture.
            </summary>
        </member>
        <member name="T:DPSF.SpriteBatchSettings">
            <summary>
            Class to hold all of the SpriteBatch-specific drawing Settings
            </summary>
        </member>
        <member name="F:DPSF.SpriteBatchSettings.SortMode">
            <summary>
            The Sort Mode to use in the SpriteBatch.Begin() function call.
            </summary>
        </member>
        <member name="F:DPSF.SpriteBatchSettings.TransformationMatrix">
            <summary>
            The Transformation Matrix used in the SpriteBatch.Begin() function call.
            </summary>
        </member>
        <member name="T:DPSF.RenderProperties">
            <summary>
            Class to hold all of the drawing Settings
            </summary>
        </member>
        <member name="M:DPSF.RenderProperties.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DPSF.RenderProperties"/> class, setting each property to its default value.
            </summary>
        </member>
        <member name="M:DPSF.RenderProperties.ResetToDefaults">
            <summary>
            Resets each of the render properties to their default values.
            </summary>
        </member>
        <member name="P:DPSF.RenderProperties.BlendState">
            <summary>
            Get / Set the BlendState to use when drawing the particles.
            <para>Default value is BlendState.AlphaBlend.</para>
            </summary>
        </member>
        <member name="P:DPSF.RenderProperties.DepthStencilState">
            <summary>
            Get / Set the DepthStencilState to use when drawing the particles.
            <para>Default value is DepthStencilState.DepthRead.</para>
            </summary>
        </member>
        <member name="P:DPSF.RenderProperties.RasterizerState">
            <summary>
            Get / Set the RasterizerState to use when drawing the particles.
            <para>Default value is RasterizerState.CullCounterClockwise.</para>
            </summary>
        </member>
        <member name="P:DPSF.RenderProperties.SamplerState">
            <summary>
            Get / Set the SamplerState to use when drawing the particles.
            <para>Default value is SamplerState.LinearClamp.</para>
            </summary>
        </member>
        <member name="T:DPSF.DefaultAnimatedSprite3DBillboardParticleSystem">
            <summary>
            The Default Animated 3D Billboard Sprite Particle System to inherit from, which uses Default Animated Sprite Particles
            </summary>
        </member>
        <member name="T:DPSF.DPSFDefaultAnimatedSprite3DBillboardParticleSystem`2">
            <summary>
            The Default Animated Sprite Particle System class
            </summary>
            <typeparam name="Particle">The Particle class to use</typeparam>
            <typeparam name="Vertex">The Vertex Format to use</typeparam>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedSprite3DBillboardParticleSystem`2.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedSprite3DBillboardParticleSystem`2.UpdateParticleAnimationAndTextureCoordinates(DPSF.DefaultAnimatedSprite3DBillboardParticle,System.Single)">
            <summary>
            Updates the Animation, as well as the Particle's Texture Coordinates to match the Animation
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DPSFDefaultAnimatedSprite3DBillboardParticleSystem`2.UpdateParticleToDieOnceAnimationFinishesPlaying(DPSF.DefaultAnimatedSprite3DBillboardParticle,System.Single)">
            <summary>
            Updates the Particle to be removed from the Particle System once the Animation finishes Playing
            </summary>
            <param name="cParticle">The Particle to update</param>
            <param name="fElapsedTimeInSeconds">How long it has been since the last update</param>
        </member>
        <member name="M:DPSF.DefaultAnimatedSprite3DBillboardParticleSystem.#ctor(Microsoft.Xna.Framework.Game)">
            <summary>
            Constructor
            </summary>
            <param name="cGame">Handle to the Game object being used. Pass in null for this 
            parameter if not using a Game object.</param>
        </member>
        <member name="T:DPSF.DefaultAnimatedSprite3DBillboardParticle">
            <summary>
            Particle used by the Default Animated Sprite 3D Billboard Particle System
            </summary>
        </member>
        <member name="F:DPSF.DefaultAnimatedSprite3DBillboardParticle.Animation">
            <summary>
            Class to hold this Particle's Animation information
            </summary>
        </member>
        <member name="M:DPSF.DefaultAnimatedSprite3DBillboardParticle.Reset">
            <summary>
            Resets the Particle variables to their default values
            </summary>
        </member>
        <member name="M:DPSF.DefaultAnimatedSprite3DBillboardParticle.CopyFrom(DPSF.DPSFParticle)">
            <summary>
            Deep copy all of the Particle properties
            </summary>
            <param name="ParticleToCopy">The Particle to Copy the properties from</param>
        </member>
        <member name="T:System.Collections.Generic.Extensions">
            <summary>
            Class used to extend other classes.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.Extensions.RemoveAll``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Removes all elements from the List that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T">The type of elements held by the List.</typeparam>
            <param name="list">The List to remove the elements from.</param>
            <param name="match">The Predicate delegate that defines the conditions of the elements to remove.</param>
        </member>
        <member name="M:System.Collections.Generic.Extensions.Exists``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns true if the List contains elements that match the conditions defined by the specified predicate.
            </summary>
            <typeparam name="T">The type of elements held by the List.</typeparam>
            <param name="list">The List to search for a match in.</param>
            <param name="match">The Predicate delegate that defines the conditions of the elements to match against.</param>
        </member>
        <member name="T:DPSF.ParticleEmitter">
            <summary>
            Class used to automatically create new Particles in a Particle System
            </summary>
        </member>
        <member name="M:DPSF.ParticleEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DPSF.ParticleEmitter"/> class.
            </summary>
        </member>
        <member name="M:DPSF.ParticleEmitter.#ctor(DPSF.ParticleEmitter)">
            <summary>
            Initializes a new instance of the <see cref="T:DPSF.ParticleEmitter"/> class.
            </summary>
            <param name="emitterToCopy">The emitter to copy from.</param>
        </member>
        <member name="M:DPSF.ParticleEmitter.CopyFrom(DPSF.ParticleEmitter)">
            <summary>
            Copies the given Emitter's values into this instance.
            </summary>
            <param name="emitterToCopy">The emitter to copy from.</param>
        </member>
        <member name="M:DPSF.ParticleEmitter.UpdateAndGetNumberOfParticlesToEmit(System.Single)">
            <summary>
            Updates the Emitter's Position and Orientation according to its 
            Velocities and Accelerations, and returns how many Particles should 
            be emitted this frame.
            </summary>
            <param name="fElapsedTimeInSeconds">How long (in seconds) it has been 
            since this function was called</param>
            <returns>Returns the number of Particles that should be emitted</returns>
        </member>
        <member name="M:DPSF.ParticleEmitter.CalculateHowManyParticlesToEmit(System.Single)">
            <summary>
            Calculates how many Particles should be emitted based on the amount of Time Elapsed
            </summary>
            <param name="fElapsedTimeInSeconds">How much Time has Elapsed (in seconds) since the last Update</param>
            <returns>Returns how many Particles should be emitted</returns>
        </member>
        <member name="E:DPSF.ParticleEmitter.BurstComplete">
            <summary>
            Raised when a Burst property reaches (or is set to) zero 
            </summary>
        </member>
        <member name="P:DPSF.ParticleEmitter.Enabled">
            <summary>
            Get / Set if the Emitter is able to Emit Particles or not.
            <para>NOTE: If this is false, not even Bursts will Emit Particles.</para>
            <para>NOTE: The Position, Orientation, and Pivot Data will still be updated when this is false.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleEmitter.PositionData">
            <summary>
            Get the Position Data (Position, Velocity, and Acceleration)
            </summary>
        </member>
        <member name="P:DPSF.ParticleEmitter.OrientationData">
            <summary>
            Get the Orientation Data (Orientation, Rotational Velocity, and Rotational Acceleration)
            </summary>
        </member>
        <member name="P:DPSF.ParticleEmitter.PivotPointData">
            <summary>
            Get the Pivot Point Data (Pivot Point, Pivot Rotational Velocity, and Pivot Rotational Acceleration)
            </summary>
        </member>
        <member name="P:DPSF.ParticleEmitter.EmitParticlesAutomatically">
            <summary>
            Get / Set if the Emitter should Emit Particles Automatically or not.
            <para>NOTE: Particles will only be emitted if the Emitter is Enabled.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleEmitter.ParticlesPerSecond">
            <summary>
            Get / Set how many Particles should be emitted per Second
            </summary>
        </member>
        <member name="P:DPSF.ParticleEmitter.BurstParticles">
            <summary>
            Get / Set how many Particles the Emitter should Burst. The Emitter will emit
            Particles, at the speed corresponding to its Particles Per Second rate, until this amount 
            of Particles have been emitted.
            <para>NOTE: Bursts are only processed when the Emit Particles Automatically property is false.</para>
            <para>NOTE: Bursts will only emit Particles if the Emitter is Enabled.</para>
            <para>NOTE: This will be set to zero if a negative value is specified.</para>
            <para>NOTE: This will fire the BurstComplete event when it reaches (or is set to) zero.</para>
            </summary>
        </member>
        <member name="P:DPSF.ParticleEmitter.BurstTime">
            <summary>
            Get / Set how long the Emitter should Burst for (in seconds). The Emitter will emit
            Particles, at the speed corresponding to its Particles Per Second rate, until this amount 
            of time in seconds has elapsed.
            <para>NOTE: Bursts are only processed when the Emit Particles Automatically property is false.</para>
            <para>NOTE: Bursts will only emit Particles if the Emitter is Enabled.</para>
            <para>NOTE: This will be set to zero if a negative value is specified.</para>
            <para>NOTE: This will fire the BurstComplete event when it reaches (or is set to) zero.</para>
            </summary>
        </member>
        <member name="T:DPSF.PivotPoint2D">
            <summary>
            Class to hold and update an object's 2D Pivot Point (point to rotate around), Pivot Velocity, and 
            Pivot Acceleration. This class requires a Position2D object, and optionally a Orientation2D object,
            that should be affected by rotations around the Pivot Point.
            </summary>
        </member>
        <member name="F:DPSF.PivotPoint2D.PivotPoint">
            <summary>
            The 2D Pivot Point that the object should rotate around.
            <para>NOTE: This only has effect when Rotational Pivot Velocity / Acceleration are used.</para>
            </summary>
        </member>
        <member name="F:DPSF.PivotPoint2D.PivotRotationalVelocity">
            <summary>
            The object's Rotational Velocity around the Pivot Point (Position change).
            <para>NOTE: Rotations are specified in radians.</para>
            </summary>
        </member>
        <member name="F:DPSF.PivotPoint2D.PivotRotationalAcceleration">
            <summary>
            The object's Rotational Acceleration around the Pivot Point (Position change).
            <para>NOTE: Rotations are specified in radians.</para>
            </summary>
        </member>
        <member name="M:DPSF.PivotPoint2D.#ctor(DPSF.PivotPoint2D)">
            <summary>
            Copy Constructor
            </summary>
            <param name="cPivotPointToCopy">The PivotPoint2D object to copy</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.CopyFrom(DPSF.PivotPoint2D)">
            <summary>
            Copies the given PivotPoint2D object's data into this object's data
            </summary>
            <param name="cPivotPointToCopy"></param>
        </member>
        <member name="M:DPSF.PivotPoint2D.#ctor(DPSF.Position2D)">
            <summary>
            Explicit Constructor. Set the Position2D object that should be affected by rotations around
            this Pivot Point.
            </summary>
            <param name="cPosition">Handle to the Position2D object to update</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.#ctor(DPSF.Position2D,DPSF.Orientation2D)">
            <summary>
            Explicit Constructor. Set the Position2D and Orientation2D objects that should be affected by 
            rotational around this Pivot Point.
            </summary>
            <param name="cPosition">Handle to the Position2D object to update</param>
            <param name="cOrientation">Handle to the Orienetation2D object to update</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.RotatePositionAndOrientation(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Rotates the object about its center, changing its Orientation, as well as around the 
            specified Pivot Point, changing its Position
            </summary>
            <param name="fRotation">The Rotation in radians to apply to the object</param>
            <param name="sPivotPoint">The Point to rotate the object around</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.RotatePositionAndOrientationVector3(System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Rotates the object about its center, changing its Orientation, as well as around the 
            specified 3D Pivot Point, changing its 2D Position.
            <para>NOTE: The Pivot Point's Z-value is ignored.</para>
            <para>NOTE: This function is provided for convenience when using 3D Vectors in 2D coordinate systems.</para>
            </summary>
            <param name="fRotation">The Rotation in radians to apply to the object</param>
            <param name="sPivotPoint">The Point to rotate the object around. 
            NOTE: The Z-value is ignored, since this is a 2D rotation.</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.RotatePosition(System.Single,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Rotates the object around the specified Pivot Point, changing its Position, without 
            changing its Orientation.
            </summary>
            <param name="fRotation">The Rotation in radians to apply to the object</param>
            <param name="sPivotPoint">The Point to rotate the object around</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.RotatePositionVector3(System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Rotates the object around the specified Pivot Point, changing its Position, without 
            changing its Orientation.
            <para>NOTE: The Pivot Point's Z-value is ignored.</para>
            <para>NOTE: This function is provided for convenience when using 3D Vectors in 2D coordinate systems.</para>
            </summary>
            <param name="fRotation">The Rotation in radians to apply to the object</param>
            <param name="sPivotPoint">The Point to rotate the object around.
            NOTE: The Z-value is ignored, since this is a 2D rotation.</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.Update(System.Single)">
            <summary>
            Update the Position and Orientation according to the Pivot Rotational Velocity / Acceleration
            </summary>
            <param name="fElapsedTimeInSeconds">The time Elapsed in Seconds since the last Update</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.RotatePositionAndOrientation(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2@,System.Single@)">
            <summary>
            Rotates the given Position and Orientation around the Pivot Point, changing the Position and Orientation
            </summary>
            <param name="fRotation">The Rotation in radians to apply to the object</param>
            <param name="sPivotPoint">The Point to rotate the object around</param>
            <param name="srPosition">The Position of the object to be modified</param>
            <param name="frOrientation">The Orientation (rotation) of the object to be modified</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.RotatePositionAndOrientationVector3(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3@,System.Single@)">
            <summary>
            Rotates the given Position and Orientation around the Pivot Point, changing the Position and Orientation.
            <para>NOTE: The Pivot Point and Position's Z-values are ignored.</para>
            <para>NOTE: This function is provided for convenience when using 3D Vectors in 2D coordinate systems.</para>
            </summary>
            <param name="fRotation">The Rotation in radians to apply to the object</param>
            <param name="sPivotPoint">The Point to rotate the object around.
            NOTE: The Z-value is ignored, since this is a 2D rotation.</param>
            <param name="srPosition">The Position of the object to be modified.
            NOTE: The Z-value is ignored and will not be changed, since this is a 2D rotation.</param>
            <param name="frOrientation">The Orientation (rotation) of the object to be modified</param>
        </member>
        <member name="M:DPSF.PivotPoint2D.RotatePosition(System.Single,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the new Position after Rotating the given Position around the specified Pivot Point
            </summary>
            <param name="fRotation">The Rotation in radians to rotate around the Pivot Point by</param>
            <param name="sPivotPoint">The Point to Rotate around</param>
            <param name="sPosition">The current Position of the object</param>
            <returns>Returns the new Position after Rotating the given Position around the specified Pivot Point</returns>
        </member>
        <member name="M:DPSF.PivotPoint2D.RotatePositionVector3(System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the new Position after Rotating the given Position around the specified Pivot Point.
            <para>NOTE: The Pivot Point and Position's Z-values are ignored.</para>
            <para>This function is provided for convenience when using 3D Vectors in 2D coordinate systems.</para>
            </summary>
            <param name="fRotation">The Rotation in radians to rotate around the Pivot Point by</param>
            <param name="sPivotPoint">The Point to Rotate around.
            NOTE: The Z-value is ignored, since this is a 2D rotation.</param>
            <param name="sPosition">The current Position of the object.
            NOTE: The Z-value is ignored and will not be changed, since this is a 2D rotation.</param>
            <returns>Returns the new Position after Rotating the given Position around the specified Pivot Point.</returns>
        </member>
        <member name="P:DPSF.PivotPoint2D.PositionData">
            <summary>
            Get / Set the Position2D object that the Pivot Point should affect
            </summary>
        </member>
        <member name="P:DPSF.PivotPoint2D.OrientationData">
            <summary>
            Get / Set the Orientation2D object that the Pivot Point should affect
            </summary>
        </member>
        <member name="P:DPSF.PivotPoint2D.RotateOrientationToo">
            <summary>
            Specify if the Update() function should Rotate the object's Orientation too when it
            rotates the object around the Pivot Point
            </summary>
        </member>
    </members>
</doc>
